
stm32f303k8t6_i2c_slave_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800662c  0800662c  0000762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006664  08006664  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006664  08006664  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006664  08006664  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006664  08006664  00007664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006668  08006668  00007668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800666c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          000001c8  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef8e  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002519  00000000  00000000  00016fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  000194e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000930  00000000  00000000  0001a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b236  00000000  00000000  0001a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125c4  00000000  00000000  00035c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f7d2  00000000  00000000  000481e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e79b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f70  00000000  00000000  000e79f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000ea968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006614 	.word	0x08006614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006614 	.word	0x08006614

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	@ 0x50
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]
 80001ea:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2228      	movs	r2, #40	@ 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f006 f9e1 	bl	80065ba <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001f8:	4b55      	ldr	r3, [pc, #340]	@ (8000350 <MX_ADC1_Init+0x188>)
 80001fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80001fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000200:	4b53      	ldr	r3, [pc, #332]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000202:	2200      	movs	r2, #0
 8000204:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000206:	4b52      	ldr	r3, [pc, #328]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000208:	2200      	movs	r2, #0
 800020a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800020c:	4b50      	ldr	r3, [pc, #320]	@ (8000350 <MX_ADC1_Init+0x188>)
 800020e:	2201      	movs	r2, #1
 8000210:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000212:	4b4f      	ldr	r3, [pc, #316]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000214:	2200      	movs	r2, #0
 8000216:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000218:	4b4d      	ldr	r3, [pc, #308]	@ (8000350 <MX_ADC1_Init+0x188>)
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000220:	4b4b      	ldr	r3, [pc, #300]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000222:	2200      	movs	r2, #0
 8000224:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000226:	4b4a      	ldr	r3, [pc, #296]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000228:	2201      	movs	r2, #1
 800022a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800022c:	4b48      	ldr	r3, [pc, #288]	@ (8000350 <MX_ADC1_Init+0x188>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000232:	4b47      	ldr	r3, [pc, #284]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000238:	4b45      	ldr	r3, [pc, #276]	@ (8000350 <MX_ADC1_Init+0x188>)
 800023a:	2200      	movs	r2, #0
 800023c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000240:	4b43      	ldr	r3, [pc, #268]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000242:	2204      	movs	r2, #4
 8000244:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000246:	4b42      	ldr	r3, [pc, #264]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000248:	2200      	movs	r2, #0
 800024a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800024c:	4b40      	ldr	r3, [pc, #256]	@ (8000350 <MX_ADC1_Init+0x188>)
 800024e:	2200      	movs	r2, #0
 8000250:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000252:	483f      	ldr	r0, [pc, #252]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000254:	f000 feb0 	bl	8000fb8 <HAL_ADC_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800025e:	f000 fd29 	bl	8000cb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000262:	2300      	movs	r3, #0
 8000264:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000266:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800026a:	4619      	mov	r1, r3
 800026c:	4838      	ldr	r0, [pc, #224]	@ (8000350 <MX_ADC1_Init+0x188>)
 800026e:	f002 f861 	bl	8002334 <HAL_ADCEx_MultiModeConfigChannel>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000278:	f000 fd1c 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800027c:	2301      	movs	r3, #1
 800027e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000284:	2300      	movs	r3, #0
 8000286:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000288:	2300      	movs	r3, #0
 800028a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800028c:	2300      	movs	r3, #0
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Offset = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000298:	4619      	mov	r1, r3
 800029a:	482d      	ldr	r0, [pc, #180]	@ (8000350 <MX_ADC1_Init+0x188>)
 800029c:	f001 fa72 	bl	8001784 <HAL_ADC_ConfigChannel>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80002a6:	f000 fd05 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80002b6:	2304      	movs	r3, #4
 80002b8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80002ba:	2302      	movs	r3, #2
 80002bc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80002be:	2340      	movs	r3, #64	@ 0x40
 80002c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80002c2:	2301      	movs	r3, #1
 80002c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sConfigInjected.InjectedOffset = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	481a      	ldr	r0, [pc, #104]	@ (8000350 <MX_ADC1_Init+0x188>)
 80002e6:	f001 fd0b 	bl	8001d00 <HAL_ADCEx_InjectedConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80002f0:	f000 fce0 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80002f4:	230c      	movs	r3, #12
 80002f6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	4813      	ldr	r0, [pc, #76]	@ (8000350 <MX_ADC1_Init+0x188>)
 8000302:	f001 fcfd 	bl	8001d00 <HAL_ADCEx_InjectedConfigChannel>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 800030c:	f000 fcd2 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 8000310:	2310      	movs	r3, #16
 8000312:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000314:	2303      	movs	r3, #3
 8000316:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <MX_ADC1_Init+0x188>)
 800031e:	f001 fcef 	bl	8001d00 <HAL_ADCEx_InjectedConfigChannel>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x164>
  {
    Error_Handler();
 8000328:	f000 fcc4 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VBAT;
 800032c:	2311      	movs	r3, #17
 800032e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000330:	2304      	movs	r3, #4
 8000332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_ADC1_Init+0x188>)
 800033a:	f001 fce1 	bl	8001d00 <HAL_ADCEx_InjectedConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000344:	f000 fcb6 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3750      	adds	r7, #80	@ 0x50
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000028 	.word	0x20000028

08000354 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	@ 0x40
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
 800036a:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800036c:	463b      	mov	r3, r7
 800036e:	2228      	movs	r2, #40	@ 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f006 f921 	bl	80065ba <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000378:	4b3f      	ldr	r3, [pc, #252]	@ (8000478 <MX_ADC2_Init+0x124>)
 800037a:	4a40      	ldr	r2, [pc, #256]	@ (800047c <MX_ADC2_Init+0x128>)
 800037c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800037e:	4b3e      	ldr	r3, [pc, #248]	@ (8000478 <MX_ADC2_Init+0x124>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000384:	4b3c      	ldr	r3, [pc, #240]	@ (8000478 <MX_ADC2_Init+0x124>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800038a:	4b3b      	ldr	r3, [pc, #236]	@ (8000478 <MX_ADC2_Init+0x124>)
 800038c:	2201      	movs	r2, #1
 800038e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000390:	4b39      	ldr	r3, [pc, #228]	@ (8000478 <MX_ADC2_Init+0x124>)
 8000392:	2200      	movs	r2, #0
 8000394:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000396:	4b38      	ldr	r3, [pc, #224]	@ (8000478 <MX_ADC2_Init+0x124>)
 8000398:	2200      	movs	r2, #0
 800039a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039e:	4b36      	ldr	r3, [pc, #216]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a4:	4b34      	ldr	r3, [pc, #208]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003aa:	4b33      	ldr	r3, [pc, #204]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003b0:	4b31      	ldr	r3, [pc, #196]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003b6:	4b30      	ldr	r3, [pc, #192]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003be:	4b2e      	ldr	r3, [pc, #184]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003d0:	4829      	ldr	r0, [pc, #164]	@ (8000478 <MX_ADC2_Init+0x124>)
 80003d2:	f000 fdf1 	bl	8000fb8 <HAL_ADC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80003dc:	f000 fc6a 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e8:	2300      	movs	r3, #0
 80003ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	2300      	movs	r3, #0
 80003ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.Offset = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003fc:	4619      	mov	r1, r3
 80003fe:	481e      	ldr	r0, [pc, #120]	@ (8000478 <MX_ADC2_Init+0x124>)
 8000400:	f001 f9c0 	bl	8001784 <HAL_ADC_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800040a:	f000 fc53 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800040e:	2301      	movs	r3, #1
 8000410:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000412:	2301      	movs	r3, #1
 8000414:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800041a:	2302      	movs	r3, #2
 800041c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 800041e:	2302      	movs	r3, #2
 8000420:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000422:	2340      	movs	r3, #64	@ 0x40
 8000424:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000426:	2301      	movs	r3, #1
 8000428:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800042e:	2300      	movs	r3, #0
 8000430:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	4619      	mov	r1, r3
 8000442:	480d      	ldr	r0, [pc, #52]	@ (8000478 <MX_ADC2_Init+0x124>)
 8000444:	f001 fc5c 	bl	8001d00 <HAL_ADCEx_InjectedConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 800044e:	f000 fc31 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000452:	2302      	movs	r3, #2
 8000454:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000456:	2302      	movs	r3, #2
 8000458:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800045a:	463b      	mov	r3, r7
 800045c:	4619      	mov	r1, r3
 800045e:	4806      	ldr	r0, [pc, #24]	@ (8000478 <MX_ADC2_Init+0x124>)
 8000460:	f001 fc4e 	bl	8001d00 <HAL_ADCEx_InjectedConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 800046a:	f000 fc23 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	3740      	adds	r7, #64	@ 0x40
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000078 	.word	0x20000078
 800047c:	50000100 	.word	0x50000100

08000480 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08c      	sub	sp, #48	@ 0x30
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 031c 	add.w	r3, r7, #28
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80004a0:	d146      	bne.n	8000530 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80004a2:	4b3f      	ldr	r3, [pc, #252]	@ (80005a0 <HAL_ADC_MspInit+0x120>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	3301      	adds	r3, #1
 80004a8:	4a3d      	ldr	r2, [pc, #244]	@ (80005a0 <HAL_ADC_MspInit+0x120>)
 80004aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004ac:	4b3c      	ldr	r3, [pc, #240]	@ (80005a0 <HAL_ADC_MspInit+0x120>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d10b      	bne.n	80004cc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004b4:	4b3b      	ldr	r3, [pc, #236]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a3a      	ldr	r2, [pc, #232]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004be:	6153      	str	r3, [r2, #20]
 80004c0:	4b38      	ldr	r3, [pc, #224]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c8:	61bb      	str	r3, [r7, #24]
 80004ca:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b35      	ldr	r3, [pc, #212]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a34      	ldr	r2, [pc, #208]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d6:	6153      	str	r3, [r2, #20]
 80004d8:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4b2f      	ldr	r3, [pc, #188]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a2e      	ldr	r2, [pc, #184]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004ee:	6153      	str	r3, [r2, #20]
 80004f0:	4b2c      	ldr	r3, [pc, #176]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004f8:	613b      	str	r3, [r7, #16]
 80004fa:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004fc:	2301      	movs	r3, #1
 80004fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000500:	2303      	movs	r3, #3
 8000502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 031c 	add.w	r3, r7, #28
 800050c:	4619      	mov	r1, r3
 800050e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000512:	f002 fab1 	bl	8002a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000516:	2302      	movs	r3, #2
 8000518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	2303      	movs	r3, #3
 800051c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	4619      	mov	r1, r3
 8000528:	481f      	ldr	r0, [pc, #124]	@ (80005a8 <HAL_ADC_MspInit+0x128>)
 800052a:	f002 faa5 	bl	8002a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800052e:	e032      	b.n	8000596 <HAL_ADC_MspInit+0x116>
  else if(adcHandle->Instance==ADC2)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1d      	ldr	r2, [pc, #116]	@ (80005ac <HAL_ADC_MspInit+0x12c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d12d      	bne.n	8000596 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <HAL_ADC_MspInit+0x120>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <HAL_ADC_MspInit+0x120>)
 8000542:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000544:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <HAL_ADC_MspInit+0x120>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d10b      	bne.n	8000564 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800054c:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6153      	str	r3, [r2, #20]
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 800056a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800056e:	6153      	str	r3, [r2, #20]
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <HAL_ADC_MspInit+0x124>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800057c:	2330      	movs	r3, #48	@ 0x30
 800057e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000580:	2303      	movs	r3, #3
 8000582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000592:	f002 fa71 	bl	8002a78 <HAL_GPIO_Init>
}
 8000596:	bf00      	nop
 8000598:	3730      	adds	r7, #48	@ 0x30
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000c8 	.word	0x200000c8
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48000400 	.word	0x48000400
 80005ac:	50000100 	.word	0x50000100

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c6:	4b30      	ldr	r3, [pc, #192]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a29      	ldr	r2, [pc, #164]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a23      	ldr	r2, [pc, #140]	@ (8000688 <MX_GPIO_Init+0xd8>)
 80005fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_GPIO_Init+0xd8>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f002 fba0 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	481a      	ldr	r0, [pc, #104]	@ (800068c <MX_GPIO_Init+0xdc>)
 8000622:	f002 fb9b 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
 8000626:	f44f 538e 	mov.w	r3, #4544	@ 0x11c0
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f002 fa1b 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065e:	f002 fa0b 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000662:	2320      	movs	r3, #32
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_GPIO_Init+0xdc>)
 800067a:	f002 f9fd 	bl	8002a78 <HAL_GPIO_Init>

}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	48000400 	.word	0x48000400

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <MX_I2C1_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	@ (8000708 <MX_I2C1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_I2C1_Init+0x74>)
 800069c:	f240 220b 	movw	r2, #523	@ 0x20b
 80006a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006a4:	2240      	movs	r2, #64	@ 0x40
 80006a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006ce:	f002 fb5d 	bl	8002d8c <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 faec 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4809      	ldr	r0, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006e0:	f003 ffb0 	bl	8004644 <HAL_I2CEx_ConfigAnalogFilter>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006ea:	f000 fae3 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006f2:	f003 fff2 	bl	80046da <HAL_I2CEx_ConfigDigitalFilter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 fada 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000cc 	.word	0x200000cc
 8000708:	40005400 	.word	0x40005400

0800070c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <HAL_I2C_MspInit+0x9c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d137      	bne.n	800079e <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <HAL_I2C_MspInit+0xa0>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a1e      	ldr	r2, [pc, #120]	@ (80007ac <HAL_I2C_MspInit+0xa0>)
 8000734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <HAL_I2C_MspInit+0xa0>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000746:	23c0      	movs	r3, #192	@ 0xc0
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000756:	2304      	movs	r3, #4
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <HAL_I2C_MspInit+0xa4>)
 8000762:	f002 f989 	bl	8002a78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <HAL_I2C_MspInit+0xa0>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a10      	ldr	r2, [pc, #64]	@ (80007ac <HAL_I2C_MspInit+0xa0>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <HAL_I2C_MspInit+0xa0>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	201f      	movs	r0, #31
 8000784:	f002 f8f7 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000788:	201f      	movs	r0, #31
 800078a:	f002 f910 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2020      	movs	r0, #32
 8000794:	f002 f8ef 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000798:	2020      	movs	r0, #32
 800079a:	f002 f908 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	@ 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40005400 	.word	0x40005400
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 fb98 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f988 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f7ff fef6 	bl	80005b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c4:	f7ff ff64 	bl	8000690 <MX_I2C1_Init>
  MX_ADC1_Init();
 80007c8:	f7ff fcfe 	bl	80001c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007cc:	f7ff fdc2 	bl	8000354 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 faf0 	bl	8000db4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Запуск I2C slave на прием данных
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80007d4:	48ac      	ldr	r0, [pc, #688]	@ (8000a88 <main+0x2d4>)
 80007d6:	f002 fc33 	bl	8003040 <HAL_I2C_EnableListen_IT>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <main+0x30>
    {
      /* Transfer error in reception process */
      Error_Handler();
 80007e0:	f000 fa68 	bl	8000cb4 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  // приём данных
	  	  if (HAL_I2C_Slave_Receive_IT(&hi2c1, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 80007e4:	2202      	movs	r2, #2
 80007e6:	49a9      	ldr	r1, [pc, #676]	@ (8000a8c <main+0x2d8>)
 80007e8:	48a7      	ldr	r0, [pc, #668]	@ (8000a88 <main+0x2d4>)
 80007ea:	f002 fbd9 	bl	8002fa0 <HAL_I2C_Slave_Receive_IT>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <main+0x44>
	      {
	          // Ошибка приема
	          Error_Handler();
 80007f4:	f000 fa5e 	bl	8000cb4 <Error_Handler>
	      }

	  	  if (command_received[0] == 1)  // Калибровка АЦП отр ADC2
 80007f8:	4ba5      	ldr	r3, [pc, #660]	@ (8000a90 <main+0x2dc>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d106      	bne.n	8000810 <main+0x5c>
	  	  {
		  	  HAL_ADCEx_Calibration_Start(&hadc2, 2);
 8000802:	2102      	movs	r1, #2
 8000804:	48a3      	ldr	r0, [pc, #652]	@ (8000a94 <main+0x2e0>)
 8000806:	f000 fe37 	bl	8001478 <HAL_ADCEx_Calibration_Start>
	  		  command_received[0] = 0;
 800080a:	4ba1      	ldr	r3, [pc, #644]	@ (8000a90 <main+0x2dc>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  if (command_received[1] == 1) // АЦП отр ADC2
 8000810:	4b9f      	ldr	r3, [pc, #636]	@ (8000a90 <main+0x2dc>)
 8000812:	785b      	ldrb	r3, [r3, #1]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b01      	cmp	r3, #1
 8000818:	d11a      	bne.n	8000850 <main+0x9c>
	  	  {
	  		 HAL_ADCEx_InjectedStart(&hadc2); // Запуск АЦП
 800081a:	489e      	ldr	r0, [pc, #632]	@ (8000a94 <main+0x2e0>)
 800081c:	f000 fe9e 	bl	800155c <HAL_ADCEx_InjectedStart>
	  		 HAL_ADC_PollForConversion(&hadc2,100); //дождёмся окончания преобразований
 8000820:	2164      	movs	r1, #100	@ 0x64
 8000822:	489c      	ldr	r0, [pc, #624]	@ (8000a94 <main+0x2e0>)
 8000824:	f000 fd5a 	bl	80012dc <HAL_ADC_PollForConversion>
	  		 ADC_OTR = HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_2);
 8000828:	2102      	movs	r1, #2
 800082a:	489a      	ldr	r0, [pc, #616]	@ (8000a94 <main+0x2e0>)
 800082c:	f000 ff77 	bl	800171e <HAL_ADCEx_InjectedGetValue>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b98      	ldr	r3, [pc, #608]	@ (8000a98 <main+0x2e4>)
 8000836:	801a      	strh	r2, [r3, #0]
	  		 txBuffer[0] = (int16_t) ADC_OTR;
 8000838:	4b97      	ldr	r3, [pc, #604]	@ (8000a98 <main+0x2e4>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b96      	ldr	r3, [pc, #600]	@ (8000a9c <main+0x2e8>)
 8000842:	701a      	strb	r2, [r3, #0]
	  		 HAL_ADCEx_InjectedStop(&hadc2); //остановим преобразования
 8000844:	4893      	ldr	r0, [pc, #588]	@ (8000a94 <main+0x2e0>)
 8000846:	f000 ff11 	bl	800166c <HAL_ADCEx_InjectedStop>
	  	  	 command_received[1] = 0;
 800084a:	4b91      	ldr	r3, [pc, #580]	@ (8000a90 <main+0x2dc>)
 800084c:	2200      	movs	r2, #0
 800084e:	705a      	strb	r2, [r3, #1]
	  	  }

	  	  if (command_received[2] == 1) // Калибровка АЦП пад
 8000850:	4b8f      	ldr	r3, [pc, #572]	@ (8000a90 <main+0x2dc>)
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b01      	cmp	r3, #1
 8000858:	d106      	bne.n	8000868 <main+0xb4>
	  	  {
	  		 HAL_ADCEx_Calibration_Start(&hadc2, 1);
 800085a:	2101      	movs	r1, #1
 800085c:	488d      	ldr	r0, [pc, #564]	@ (8000a94 <main+0x2e0>)
 800085e:	f000 fe0b 	bl	8001478 <HAL_ADCEx_Calibration_Start>
	  	  	 command_received[2] = 0;
 8000862:	4b8b      	ldr	r3, [pc, #556]	@ (8000a90 <main+0x2dc>)
 8000864:	2200      	movs	r2, #0
 8000866:	709a      	strb	r2, [r3, #2]
	  	  }

	  	  if (command_received[3] == 1) // АЦП пад
 8000868:	4b89      	ldr	r3, [pc, #548]	@ (8000a90 <main+0x2dc>)
 800086a:	78db      	ldrb	r3, [r3, #3]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b01      	cmp	r3, #1
 8000870:	d11a      	bne.n	80008a8 <main+0xf4>
	  	  {
	  		HAL_ADCEx_InjectedStart(&hadc2);
 8000872:	4888      	ldr	r0, [pc, #544]	@ (8000a94 <main+0x2e0>)
 8000874:	f000 fe72 	bl	800155c <HAL_ADCEx_InjectedStart>
	  		HAL_ADC_PollForConversion(&hadc2,100); //дождёмся окончания преобразований
 8000878:	2164      	movs	r1, #100	@ 0x64
 800087a:	4886      	ldr	r0, [pc, #536]	@ (8000a94 <main+0x2e0>)
 800087c:	f000 fd2e 	bl	80012dc <HAL_ADC_PollForConversion>
	  		ADC_PAD = HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_1);
 8000880:	2101      	movs	r1, #1
 8000882:	4884      	ldr	r0, [pc, #528]	@ (8000a94 <main+0x2e0>)
 8000884:	f000 ff4b 	bl	800171e <HAL_ADCEx_InjectedGetValue>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b84      	ldr	r3, [pc, #528]	@ (8000aa0 <main+0x2ec>)
 800088e:	801a      	strh	r2, [r3, #0]
	  		txBuffer[0] = (int16_t) ADC_PAD;
 8000890:	4b83      	ldr	r3, [pc, #524]	@ (8000aa0 <main+0x2ec>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b80      	ldr	r3, [pc, #512]	@ (8000a9c <main+0x2e8>)
 800089a:	701a      	strb	r2, [r3, #0]
	  		HAL_ADCEx_InjectedStop(&hadc2); //остановим преобразования
 800089c:	487d      	ldr	r0, [pc, #500]	@ (8000a94 <main+0x2e0>)
 800089e:	f000 fee5 	bl	800166c <HAL_ADCEx_InjectedStop>
	  		command_received[3] = 0;
 80008a2:	4b7b      	ldr	r3, [pc, #492]	@ (8000a90 <main+0x2dc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	70da      	strb	r2, [r3, #3]
	  	  }

	  	  if (command_received[4] == 1) // Калибровка АЦП 30В
 80008a8:	4b79      	ldr	r3, [pc, #484]	@ (8000a90 <main+0x2dc>)
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d106      	bne.n	80008c0 <main+0x10c>
	  	  {
	  		  HAL_ADCEx_Calibration_Start(&hadc1, 1);
 80008b2:	2101      	movs	r1, #1
 80008b4:	487b      	ldr	r0, [pc, #492]	@ (8000aa4 <main+0x2f0>)
 80008b6:	f000 fddf 	bl	8001478 <HAL_ADCEx_Calibration_Start>
	  	  	  command_received[4] = 0;
 80008ba:	4b75      	ldr	r3, [pc, #468]	@ (8000a90 <main+0x2dc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
	  	  }

	  	  if (command_received[5] == 1) // АЦП 30 В
 80008c0:	4b73      	ldr	r3, [pc, #460]	@ (8000a90 <main+0x2dc>)
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d11a      	bne.n	8000900 <main+0x14c>
	  	  {
	  		HAL_ADCEx_InjectedStart(&hadc1);
 80008ca:	4876      	ldr	r0, [pc, #472]	@ (8000aa4 <main+0x2f0>)
 80008cc:	f000 fe46 	bl	800155c <HAL_ADCEx_InjectedStart>
	  		HAL_ADC_PollForConversion(&hadc1,100); //дождёмся окончания преобразований
 80008d0:	2164      	movs	r1, #100	@ 0x64
 80008d2:	4874      	ldr	r0, [pc, #464]	@ (8000aa4 <main+0x2f0>)
 80008d4:	f000 fd02 	bl	80012dc <HAL_ADC_PollForConversion>
	  		ADC_30V = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 80008d8:	2101      	movs	r1, #1
 80008da:	4872      	ldr	r0, [pc, #456]	@ (8000aa4 <main+0x2f0>)
 80008dc:	f000 ff1f 	bl	800171e <HAL_ADCEx_InjectedGetValue>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b70      	ldr	r3, [pc, #448]	@ (8000aa8 <main+0x2f4>)
 80008e6:	801a      	strh	r2, [r3, #0]
	  		txBuffer[0] = (int16_t) ADC_30V;
 80008e8:	4b6f      	ldr	r3, [pc, #444]	@ (8000aa8 <main+0x2f4>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b6a      	ldr	r3, [pc, #424]	@ (8000a9c <main+0x2e8>)
 80008f2:	701a      	strb	r2, [r3, #0]
	  		HAL_ADCEx_InjectedStop(&hadc1); //остановим преобразования
 80008f4:	486b      	ldr	r0, [pc, #428]	@ (8000aa4 <main+0x2f0>)
 80008f6:	f000 feb9 	bl	800166c <HAL_ADCEx_InjectedStop>
	  		command_received[5] = 0;
 80008fa:	4b65      	ldr	r3, [pc, #404]	@ (8000a90 <main+0x2dc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	715a      	strb	r2, [r3, #5]
	  	  }

	  	  if (command_received[6] == 1) // Калибровка АЦП 8 В
 8000900:	4b63      	ldr	r3, [pc, #396]	@ (8000a90 <main+0x2dc>)
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b01      	cmp	r3, #1
 8000908:	d106      	bne.n	8000918 <main+0x164>
	  	  {
	  		 HAL_ADCEx_Calibration_Start(&hadc1, 2);
 800090a:	2102      	movs	r1, #2
 800090c:	4865      	ldr	r0, [pc, #404]	@ (8000aa4 <main+0x2f0>)
 800090e:	f000 fdb3 	bl	8001478 <HAL_ADCEx_Calibration_Start>
	  		 command_received[6] = 0;
 8000912:	4b5f      	ldr	r3, [pc, #380]	@ (8000a90 <main+0x2dc>)
 8000914:	2200      	movs	r2, #0
 8000916:	719a      	strb	r2, [r3, #6]
	  	  }

	  	  if (command_received[7] == 1) // АЦП 8 В
 8000918:	4b5d      	ldr	r3, [pc, #372]	@ (8000a90 <main+0x2dc>)
 800091a:	79db      	ldrb	r3, [r3, #7]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b01      	cmp	r3, #1
 8000920:	d11a      	bne.n	8000958 <main+0x1a4>
	  	  {
	  		HAL_ADCEx_InjectedStart(&hadc1);
 8000922:	4860      	ldr	r0, [pc, #384]	@ (8000aa4 <main+0x2f0>)
 8000924:	f000 fe1a 	bl	800155c <HAL_ADCEx_InjectedStart>
	  		HAL_ADC_PollForConversion(&hadc1,100); //дождёмся окончания преобразований
 8000928:	2164      	movs	r1, #100	@ 0x64
 800092a:	485e      	ldr	r0, [pc, #376]	@ (8000aa4 <main+0x2f0>)
 800092c:	f000 fcd6 	bl	80012dc <HAL_ADC_PollForConversion>
	  		ADC_08V = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 8000930:	2102      	movs	r1, #2
 8000932:	485c      	ldr	r0, [pc, #368]	@ (8000aa4 <main+0x2f0>)
 8000934:	f000 fef3 	bl	800171e <HAL_ADCEx_InjectedGetValue>
 8000938:	4603      	mov	r3, r0
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b5b      	ldr	r3, [pc, #364]	@ (8000aac <main+0x2f8>)
 800093e:	801a      	strh	r2, [r3, #0]
	  		txBuffer[0] = (int16_t) ADC_08V;
 8000940:	4b5a      	ldr	r3, [pc, #360]	@ (8000aac <main+0x2f8>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b54      	ldr	r3, [pc, #336]	@ (8000a9c <main+0x2e8>)
 800094a:	701a      	strb	r2, [r3, #0]
	  		HAL_ADCEx_InjectedStop(&hadc1); //остановим преобразования
 800094c:	4855      	ldr	r0, [pc, #340]	@ (8000aa4 <main+0x2f0>)
 800094e:	f000 fe8d 	bl	800166c <HAL_ADCEx_InjectedStop>
	  	  	command_received[7] = 0;
 8000952:	4b4f      	ldr	r3, [pc, #316]	@ (8000a90 <main+0x2dc>)
 8000954:	2200      	movs	r2, #0
 8000956:	71da      	strb	r2, [r3, #7]
	  	  }

	  	  if (command_received[8] == 1) // Температура
 8000958:	4b4d      	ldr	r3, [pc, #308]	@ (8000a90 <main+0x2dc>)
 800095a:	7a1b      	ldrb	r3, [r3, #8]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b01      	cmp	r3, #1
 8000960:	d14e      	bne.n	8000a00 <main+0x24c>
	  	  {
	  		HAL_ADCEx_InjectedStart(&hadc1);
 8000962:	4850      	ldr	r0, [pc, #320]	@ (8000aa4 <main+0x2f0>)
 8000964:	f000 fdfa 	bl	800155c <HAL_ADCEx_InjectedStart>
	  		HAL_ADC_PollForConversion(&hadc1,100);
 8000968:	2164      	movs	r1, #100	@ 0x64
 800096a:	484e      	ldr	r0, [pc, #312]	@ (8000aa4 <main+0x2f0>)
 800096c:	f000 fcb6 	bl	80012dc <HAL_ADC_PollForConversion>
	  		RES = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8000970:	2103      	movs	r1, #3
 8000972:	484c      	ldr	r0, [pc, #304]	@ (8000aa4 <main+0x2f0>)
 8000974:	f000 fed3 	bl	800171e <HAL_ADCEx_InjectedGetValue>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab0 <main+0x2fc>)
 800097e:	801a      	strh	r2, [r3, #0]
	  		TEMP = (float) RES/4096*Vref;   // Напряжение в вольтах на датчике.
 8000980:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab0 <main+0x2fc>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b29b      	uxth	r3, r3
 8000986:	ee07 3a90 	vmov	s15, r3
 800098a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800098e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8000ab4 <main+0x300>
 8000992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000996:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8000ab8 <main+0x304>
 800099a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099e:	4b47      	ldr	r3, [pc, #284]	@ (8000abc <main+0x308>)
 80009a0:	edc3 7a00 	vstr	s15, [r3]
	  		TEMP = (tV_25-TEMP)/tSlope + 25;   // Температура в градусах.
 80009a4:	4b45      	ldr	r3, [pc, #276]	@ (8000abc <main+0x308>)
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8000ac0 <main+0x30c>
 80009ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009b2:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8000ac4 <main+0x310>
 80009b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ba:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80009be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009c2:	4b3e      	ldr	r3, [pc, #248]	@ (8000abc <main+0x308>)
 80009c4:	edc3 7a00 	vstr	s15, [r3]
	  		RES = (int16_t) TEMP;
 80009c8:	4b3c      	ldr	r3, [pc, #240]	@ (8000abc <main+0x308>)
 80009ca:	edd3 7a00 	vldr	s15, [r3]
 80009ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009d2:	ee17 3a90 	vmov	r3, s15
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b35      	ldr	r3, [pc, #212]	@ (8000ab0 <main+0x2fc>)
 80009dc:	801a      	strh	r2, [r3, #0]
	  		txBuffer[0] = (int16_t) TEMP;
 80009de:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <main+0x308>)
 80009e0:	edd3 7a00 	vldr	s15, [r3]
 80009e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <main+0x2e8>)
 80009f2:	701a      	strb	r2, [r3, #0]
	  		HAL_ADCEx_InjectedStop(&hadc1); //остановим преобразования
 80009f4:	482b      	ldr	r0, [pc, #172]	@ (8000aa4 <main+0x2f0>)
 80009f6:	f000 fe39 	bl	800166c <HAL_ADCEx_InjectedStop>
	  	  	command_received[8] = 0;
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <main+0x2dc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	721a      	strb	r2, [r3, #8]
	  	  }

	  	  if (command_received[9] == 1) // Мощность
 8000a00:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <main+0x2dc>)
 8000a02:	7a5b      	ldrb	r3, [r3, #9]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d131      	bne.n	8000a6e <main+0x2ba>
	  	  {
	  		HAL_ADCEx_InjectedStart(&hadc1);
 8000a0a:	4826      	ldr	r0, [pc, #152]	@ (8000aa4 <main+0x2f0>)
 8000a0c:	f000 fda6 	bl	800155c <HAL_ADCEx_InjectedStart>
	  		HAL_ADC_PollForConversion(&hadc1,100);
 8000a10:	2164      	movs	r1, #100	@ 0x64
 8000a12:	4824      	ldr	r0, [pc, #144]	@ (8000aa4 <main+0x2f0>)
 8000a14:	f000 fc62 	bl	80012dc <HAL_ADC_PollForConversion>
	  		V_BAT = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4822      	ldr	r0, [pc, #136]	@ (8000aa4 <main+0x2f0>)
 8000a1c:	f000 fe7f 	bl	800171e <HAL_ADCEx_InjectedGetValue>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <main+0x314>)
 8000a26:	801a      	strh	r2, [r3, #0]
	  		POWER = (float) V_BAT/4096*Vref; // Напряжение в вольтах
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <main+0x314>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	ee07 3a90 	vmov	s15, r3
 8000a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a36:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000ab4 <main+0x300>
 8000a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a3e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000ab8 <main+0x304>
 8000a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <main+0x318>)
 8000a48:	edc3 7a00 	vstr	s15, [r3]
	  		txBuffer[0] = (int16_t) POWER;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <main+0x318>)
 8000a4e:	edd3 7a00 	vldr	s15, [r3]
 8000a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a56:	ee17 3a90 	vmov	r3, s15
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <main+0x2e8>)
 8000a60:	701a      	strb	r2, [r3, #0]
	  		HAL_ADCEx_InjectedStop(&hadc1); //остановим преобразования
 8000a62:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <main+0x2f0>)
 8000a64:	f000 fe02 	bl	800166c <HAL_ADCEx_InjectedStop>
	  	  	command_received[9] = 0;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <main+0x2dc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	725a      	strb	r2, [r3, #9]
	  	  }

	  	  if (HAL_I2C_Slave_Transmit_IT(&hi2c1, txBuffer, sizeof(txBuffer)) != HAL_OK)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	490a      	ldr	r1, [pc, #40]	@ (8000a9c <main+0x2e8>)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <main+0x2d4>)
 8000a74:	f002 fa26 	bl	8002ec4 <HAL_I2C_Slave_Transmit_IT>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f43f aeb2 	beq.w	80007e4 <main+0x30>
	  	  {
	  	    // Ошибка отправки
	  	    Error_Handler();
 8000a80:	f000 f918 	bl	8000cb4 <Error_Handler>
	  	  if (HAL_I2C_Slave_Receive_IT(&hi2c1, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a84:	e6ae      	b.n	80007e4 <main+0x30>
 8000a86:	bf00      	nop
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	2000012c 	.word	0x2000012c
 8000a90:	20000120 	.word	0x20000120
 8000a94:	20000078 	.word	0x20000078
 8000a98:	20000138 	.word	0x20000138
 8000a9c:	20000130 	.word	0x20000130
 8000aa0:	20000136 	.word	0x20000136
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	20000132 	.word	0x20000132
 8000aac:	20000134 	.word	0x20000134
 8000ab0:	2000013a 	.word	0x2000013a
 8000ab4:	45800000 	.word	0x45800000
 8000ab8:	40533333 	.word	0x40533333
 8000abc:	20000140 	.word	0x20000140
 8000ac0:	3fb70a3d 	.word	0x3fb70a3d
 8000ac4:	3b8ce704 	.word	0x3b8ce704
 8000ac8:	2000013c 	.word	0x2000013c
 8000acc:	20000144 	.word	0x20000144

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	@ 0x58
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ada:	2228      	movs	r2, #40	@ 0x28
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f005 fd6b 	bl	80065ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b04:	2303      	movs	r3, #3
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b08:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b16:	2310      	movs	r3, #16
 8000b18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b24:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fe20 	bl	8004774 <HAL_RCC_OscConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 f8bb 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	230f      	movs	r3, #15
 8000b40:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fe48 	bl	80057f0 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b66:	f000 f8a5 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000b6a:	23a0      	movs	r3, #160	@ 0xa0
 8000b6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b72:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 f858 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b86:	f000 f895 	bl	8000cb4 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3758      	adds	r7, #88	@ 0x58
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
/* Обработчик прерывания по приему данных по I2C */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    // Данные успешно приняты
    // Здесь можно обработать принятые данные
	switch (rxBuffer[0])
 8000b9c:	4b35      	ldr	r3, [pc, #212]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3b05      	subs	r3, #5
 8000ba2:	2b0a      	cmp	r3, #10
 8000ba4:	d85e      	bhi.n	8000c64 <HAL_I2C_SlaveRxCpltCallback+0xd0>
 8000ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bac <HAL_I2C_SlaveRxCpltCallback+0x18>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000be7 	.word	0x08000be7
 8000bb0:	08000c03 	.word	0x08000c03
 8000bb4:	08000c1f 	.word	0x08000c1f
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c65 	.word	0x08000c65
 8000bc0:	08000bd9 	.word	0x08000bd9
 8000bc4:	08000bf5 	.word	0x08000bf5
 8000bc8:	08000c11 	.word	0x08000c11
 8000bcc:	08000c2d 	.word	0x08000c2d
 8000bd0:	08000c49 	.word	0x08000c49
 8000bd4:	08000c57 	.word	0x08000c57
		        {
		            case 0x0A: // Калибровка АЦП отр
		                command_received[0] = 1;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
		                rxBuffer[0] = 0;
 8000bde:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
		                break;
 8000be4:	e03f      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x05: // АЦП отр
		                command_received[1] = 1;
 8000be6:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	705a      	strb	r2, [r3, #1]
		                rxBuffer[0] = 0;
 8000bec:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		                break;
 8000bf2:	e038      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x0B: // Калибровка АЦП пад
		                command_received[2] = 1;
 8000bf4:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	709a      	strb	r2, [r3, #2]
		                rxBuffer[0] = 0;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
		                break;
 8000c00:	e031      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x06: // АЦП пад
		                command_received[3] = 1;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	70da      	strb	r2, [r3, #3]
		                rxBuffer[0] = 0;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
		                break;
 8000c0e:	e02a      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x0C: // Калибровка АЦП 30В
		                command_received[4] = 1;
 8000c10:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	711a      	strb	r2, [r3, #4]
		                rxBuffer[0] = 0;
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
		                break;
 8000c1c:	e023      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x07: // АЦП 30 В
		                command_received[5] = 1;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	715a      	strb	r2, [r3, #5]
		                rxBuffer[0] = 0;
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
		                break;
 8000c2a:	e01c      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x0D: // Калибровка АЦП 8 В
		                command_received[6] = 1;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	719a      	strb	r2, [r3, #6]
		                rxBuffer[0] = 0;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
		                break;
 8000c38:	e015      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x08: // АЦП 8 В
		                command_received[7] = 1;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	71da      	strb	r2, [r3, #7]
		                rxBuffer[0] = 0;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
		                break;
 8000c46:	e00e      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x0E: // Температура
		                command_received[8] = 1;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	721a      	strb	r2, [r3, #8]
		                rxBuffer[0] = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		                break;
 8000c54:	e007      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            case 0x0F: // Мощность
		                command_received[9] = 1;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	725a      	strb	r2, [r3, #9]
		                rxBuffer[0] = 0;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
		                break;
 8000c62:	e000      	b.n	8000c66 <HAL_I2C_SlaveRxCpltCallback+0xd2>
		            default:
		                break;
 8000c64:	bf00      	nop
	    {
	        // Ошибка приема
	        Error_Handler();
	    }
	    */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000012c 	.word	0x2000012c
 8000c78:	20000120 	.word	0x20000120

08000c7c <HAL_I2C_SlaveTxCpltCallback>:



/* Обработчик прерывания по передаче данных по I2C */
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    // Данные успешно переданы
    // Здесь можно обновить данные для передачи, если необходимо
	// Очистка буфера
	// Очистка буфера
	for (int i = 0; i < sizeof(txBuffer); i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e007      	b.n	8000c9a <HAL_I2C_SlaveTxCpltCallback+0x1e>
	{
	    txBuffer[i] = 0;
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(txBuffer); i++)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d9f4      	bls.n	8000c8a <HAL_I2C_SlaveTxCpltCallback+0xe>
    {
        // Ошибка передачи
        Error_Handler();
    }
    */
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000130 	.word	0x20000130

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 f90b 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <I2C1_EV_IRQHandler+0x10>)
 8000d6e:	f002 f987 	bl	8003080 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200000cc 	.word	0x200000cc

08000d7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <I2C1_ER_IRQHandler+0x10>)
 8000d82:	f002 f997 	bl	80030b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000cc 	.word	0x200000cc

08000d90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000dba:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <MX_USART2_UART_Init+0x5c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000dc0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_USART2_UART_Init+0x58>)
 8000df8:	f005 f840 	bl	8005e7c <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e02:	f7ff ff57 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000148 	.word	0x20000148
 8000e10:	40004400 	.word	0x40004400

08000e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0x7c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d128      	bne.n	8000e88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_UART_MspInit+0x80>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a16      	ldr	r2, [pc, #88]	@ (8000e94 <HAL_UART_MspInit+0x80>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <HAL_UART_MspInit+0x80>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_UART_MspInit+0x80>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <HAL_UART_MspInit+0x80>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_UART_MspInit+0x80>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e76:	2307      	movs	r3, #7
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f001 fdf8 	bl	8002a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	@ 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004400 	.word	0x40004400
 8000e94:	40021000 	.word	0x40021000

08000e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f7ff ff78 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopForever+0xe>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopForever+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f005 fb81 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eca:	f7ff fc73 	bl	80007b4 <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ed0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000edc:	0800666c 	.word	0x0800666c
  ldr r2, =_sbss
 8000ee0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee4:	200001d4 	.word	0x200001d4

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <HAL_Init+0x28>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f001 fd2f 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff feda 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fd47 	bl	80029ca <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f001 fd0f 	bl	8002976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200001d0 	.word	0x200001d0

08000fa0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001d0 	.word	0x200001d0

08000fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09a      	sub	sp, #104	@ 0x68
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e172      	b.n	80012be <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d176      	bne.n	80010d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d152      	bne.n	8001098 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fa37 	bl	8000480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d13b      	bne.n	8001098 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f001 fab1 	bl	8002588 <ADC_Disable>
 8001026:	4603      	mov	r3, r0
 8001028:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	2b00      	cmp	r3, #0
 8001036:	d12f      	bne.n	8001098 <HAL_ADC_Init+0xe0>
 8001038:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12b      	bne.n	8001098 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001048:	f023 0302 	bic.w	r3, r3, #2
 800104c:	f043 0202 	orr.w	r2, r3, #2
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001062:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001072:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001074:	4b94      	ldr	r3, [pc, #592]	@ (80012c8 <HAL_ADC_Init+0x310>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a94      	ldr	r2, [pc, #592]	@ (80012cc <HAL_ADC_Init+0x314>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9a      	lsrs	r2, r3, #18
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800108a:	e002      	b.n	8001092 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	3b01      	subs	r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f9      	bne.n	800108c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010b4:	d110      	bne.n	80010d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f023 0312 	bic.w	r3, r3, #18
 80010be:	f043 0210 	orr.w	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f040 80df 	bne.w	80012a4 <HAL_ADC_Init+0x2ec>
 80010e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 80da 	bne.w	80012a4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 80d2 	bne.w	80012a4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001108:	f043 0202 	orr.w	r2, r3, #2
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001110:	4b6f      	ldr	r3, [pc, #444]	@ (80012d0 <HAL_ADC_Init+0x318>)
 8001112:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800111c:	d102      	bne.n	8001124 <HAL_ADC_Init+0x16c>
 800111e:	4b6d      	ldr	r3, [pc, #436]	@ (80012d4 <HAL_ADC_Init+0x31c>)
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e002      	b.n	800112a <HAL_ADC_Init+0x172>
 8001124:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001128:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_ADC_Init+0x192>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <HAL_ADC_Init+0x192>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_ADC_Init+0x194>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11c      	bne.n	800118a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001150:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001152:	2b00      	cmp	r3, #0
 8001154:	d010      	beq.n	8001178 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_ADC_Init+0x1ba>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x1ba>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_ADC_Init+0x1bc>
 8001172:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	431a      	orrs	r2, r3
 8001186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001188:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7e5b      	ldrb	r3, [r3, #25]
 800118e:	035b      	lsls	r3, r3, #13
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001194:	2a01      	cmp	r2, #1
 8001196:	d002      	beq.n	800119e <HAL_ADC_Init+0x1e6>
 8001198:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800119c:	e000      	b.n	80011a0 <HAL_ADC_Init+0x1e8>
 800119e:	2200      	movs	r2, #0
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011b0:	4313      	orrs	r3, r2
 80011b2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d11b      	bne.n	80011f6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7e5b      	ldrb	r3, [r3, #25]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	3b01      	subs	r3, #1
 80011cc:	045a      	lsls	r2, r3, #17
 80011ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011d0:	4313      	orrs	r3, r2
 80011d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80011d8:	e00d      	b.n	80011f6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80011e2:	f043 0220 	orr.w	r2, r3, #32
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d007      	beq.n	800120e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	4313      	orrs	r3, r2
 8001208:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800120a:	4313      	orrs	r3, r2
 800120c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b00      	cmp	r3, #0
 800121a:	d114      	bne.n	8001246 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800122a:	f023 0302 	bic.w	r3, r3, #2
 800122e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7e1b      	ldrb	r3, [r3, #24]
 8001234:	039a      	lsls	r2, r3, #14
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4313      	orrs	r3, r2
 8001240:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001242:	4313      	orrs	r3, r2
 8001244:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <HAL_ADC_Init+0x320>)
 800124e:	4013      	ands	r3, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001256:	430b      	orrs	r3, r1
 8001258:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10c      	bne.n	800127c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	f023 010f 	bic.w	r1, r3, #15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	631a      	str	r2, [r3, #48]	@ 0x30
 800127a:	e007      	b.n	800128c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 020f 	bic.w	r2, r2, #15
 800128a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012a2:	e00a      	b.n	80012ba <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	f023 0312 	bic.w	r3, r3, #18
 80012ac:	f043 0210 	orr.w	r2, r3, #16
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80012b4:	2301      	movs	r3, #1
 80012b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80012ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3768      	adds	r7, #104	@ 0x68
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	50000300 	.word	0x50000300
 80012d4:	50000100 	.word	0x50000100
 80012d8:	fff0c007 	.word	0xfff0c007

080012dc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d102      	bne.n	80012f8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80012f2:	2308      	movs	r3, #8
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e02e      	b.n	8001356 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001474 <HAL_ADC_PollForConversion+0x198>)
 80012fa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	2b00      	cmp	r3, #0
 8001306:	d112      	bne.n	800132e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d11d      	bne.n	8001352 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f043 0220 	orr.w	r2, r3, #32
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e09d      	b.n	800146a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f043 0220 	orr.w	r2, r3, #32
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e08b      	b.n	800146a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001352:	230c      	movs	r3, #12
 8001354:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001356:	4b47      	ldr	r3, [pc, #284]	@ (8001474 <HAL_ADC_PollForConversion+0x198>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HAL_ADC_PollForConversion+0x90>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800136a:	d104      	bne.n	8001376 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	e003      	b.n	800137e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001376:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800137e:	f7ff fe0f 	bl	8000fa0 <HAL_GetTick>
 8001382:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001384:	e021      	b.n	80013ca <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d01d      	beq.n	80013ca <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d007      	beq.n	80013a4 <HAL_ADC_PollForConversion+0xc8>
 8001394:	f7ff fe04 	bl	8000fa0 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d212      	bcs.n	80013ca <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10b      	bne.n	80013ca <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f043 0204 	orr.w	r2, r3, #4
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e04f      	b.n	800146a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0d6      	beq.n	8001386 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d131      	bne.n	8001456 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d12c      	bne.n	8001456 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b08      	cmp	r3, #8
 8001408:	d125      	bne.n	8001456 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d112      	bne.n	800143e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d112      	bne.n	8001456 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	@ 0x40
 800143c:	e00b      	b.n	8001456 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f043 0220 	orr.w	r2, r3, #32
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	50000300 	.word	0x50000300

08001478 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADCEx_Calibration_Start+0x1c>
 8001490:	2302      	movs	r3, #2
 8001492:	e05f      	b.n	8001554 <HAL_ADCEx_Calibration_Start+0xdc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f001 f873 	bl	8002588 <ADC_Disable>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d14e      	bne.n	800154a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80014c0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d107      	bne.n	80014d8 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014d6:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014e6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80014e8:	f7ff fd5a 	bl	8000fa0 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014ee:	e01c      	b.n	800152a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014f0:	f7ff fd56 	bl	8000fa0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	d915      	bls.n	800152a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800150c:	d10d      	bne.n	800152a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f023 0312 	bic.w	r3, r3, #18
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e014      	b.n	8001554 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001538:	d0da      	beq.n	80014f0 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d171      	bne.n	800165a <HAL_ADCEx_InjectedStart+0xfe>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_ADCEx_InjectedStart+0x28>
 8001580:	2302      	movs	r3, #2
 8001582:	e06d      	b.n	8001660 <HAL_ADCEx_InjectedStart+0x104>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 ff97 	bl	80024c0 <ADC_Enable>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
    
      /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d159      	bne.n	8001650 <HAL_ADCEx_InjectedStart+0xf4>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                        HAL_ADC_STATE_INJ_BUSY);
      
      /* Case of independent mode or multimode(for devices with several ADCs):*/
      /* Set multimode state.                                                 */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_ADCEx_InjectedStart+0x10c>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <HAL_ADCEx_InjectedStart+0x6a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015c4:	d106      	bne.n	80015d4 <HAL_ADCEx_InjectedStart+0x78>
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015d2:	e005      	b.n	80015e0 <HAL_ADCEx_InjectedStart+0x84>
      }
      else
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Check if a regular conversion is ongoing */
      /* Note: On this device, there is no ADC error code fields related to   */
      /*       conversions on group injected only. In case of conversion on   */
      /*       going on group regular, no error code is reset.                */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <HAL_ADCEx_InjectedStart+0x96>
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2260      	movs	r2, #96	@ 0x60
 8001600:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d126      	bne.n	800165e <HAL_ADCEx_InjectedStart+0x102>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_ADCEx_InjectedStart+0x10c>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 031f 	and.w	r3, r3, #31
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8001618:	2b00      	cmp	r3, #0
 800161a:	d010      	beq.n	800163e <HAL_ADCEx_InjectedStart+0xe2>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_ADCEx_InjectedStart+0x10c>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	2b06      	cmp	r3, #6
 8001626:	d00a      	beq.n	800163e <HAL_ADCEx_InjectedStart+0xe2>
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <HAL_ADCEx_InjectedStart+0x10c>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2b07      	cmp	r3, #7
 8001632:	d004      	beq.n	800163e <HAL_ADCEx_InjectedStart+0xe2>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800163c:	d10f      	bne.n	800165e <HAL_ADCEx_InjectedStart+0x102>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0208 	orr.w	r2, r2, #8
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	e006      	b.n	800165e <HAL_ADCEx_InjectedStart+0x102>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001658:	e001      	b.n	800165e <HAL_ADCEx_InjectedStart+0x102>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800165a:	2302      	movs	r3, #2
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	50000300 	.word	0x50000300

0800166c <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADCEx_InjectedStop+0x1a>
 8001682:	2302      	movs	r3, #2
 8001684:	e047      	b.n	8001716 <HAL_ADCEx_InjectedStop+0xaa>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /*   conversion stop commands are independent)                              */
  /* - For ADC disable:                                                       */
  /*   No conversion on the other group (group regular) must be intended to   */
  /*   continue (groups regular and injected are both impacted by             */
  /*   ADC disable)                                                           */
  if(HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12f      	bne.n	80016fc <HAL_ADCEx_InjectedStop+0x90>
  {
    /* 1. Stop potential conversion on going on injected group only. */
    tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 800169c:	2160      	movs	r1, #96	@ 0x60
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 ffd8 	bl	8002654 <ADC_ConversionStop>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC peripheral if conversion on ADC group injected is          */
    /* effectively stopped and if no conversion on the other group            */
    /* (ADC group regular) is intended to continue.                           */
    if (tmp_hal_status == HAL_OK)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d12e      	bne.n	800170c <HAL_ADCEx_InjectedStop+0xa0>
    {      
      if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d118      	bne.n	80016ee <HAL_ADCEx_InjectedStop+0x82>
         ((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)    )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
      if((ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) &&
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d112      	bne.n	80016ee <HAL_ADCEx_InjectedStop+0x82>
      {
        /* 2. Disable the ADC peripheral */
        tmp_hal_status = ADC_Disable(hadc);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 ff5d 	bl	8002588 <ADC_Disable>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
        
        /* Check if ADC is effectively disabled */
        if (tmp_hal_status == HAL_OK)
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d119      	bne.n	800170c <HAL_ADCEx_InjectedStop+0xa0>
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	@ 0x40
        if (tmp_hal_status == HAL_OK)
 80016ec:	e00e      	b.n	800170c <HAL_ADCEx_InjectedStop+0xa0>
      /* Conversion on ADC group injected group is stopped, but ADC is not    */
      /* disabled since conversion on ADC group regular is still on going.    */
      else
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016fa:	e007      	b.n	800170c <HAL_ADCEx_InjectedStop+0xa0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f043 0220 	orr.w	r2, r3, #32
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	@ 0x40
      
    tmp_hal_status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b04      	cmp	r3, #4
 8001730:	d009      	beq.n	8001746 <HAL_ADCEx_InjectedGetValue+0x28>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d818      	bhi.n	800176a <HAL_ADCEx_InjectedGetValue+0x4c>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d00f      	beq.n	800175e <HAL_ADCEx_InjectedGetValue+0x40>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d006      	beq.n	8001752 <HAL_ADCEx_InjectedGetValue+0x34>
 8001744:	e011      	b.n	800176a <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174e:	60fb      	str	r3, [r7, #12]
      break;
 8001750:	e011      	b.n	8001776 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	60fb      	str	r3, [r7, #12]
      break;
 800175c:	e00b      	b.n	8001776 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001766:	60fb      	str	r3, [r7, #12]
      break;
 8001768:	e005      	b.n	8001776 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001772:	60fb      	str	r3, [r7, #12]
      break;
 8001774:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001784:	b480      	push	{r7}
 8001786:	b09b      	sub	sp, #108	@ 0x6c
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x22>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e2a1      	b.n	8001cea <HAL_ADC_ConfigChannel+0x566>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 8285 	bne.w	8001cc8 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d81c      	bhi.n	8001800 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	461a      	mov	r2, r3
 80017da:	231f      	movs	r3, #31
 80017dc:	4093      	lsls	r3, r2
 80017de:	43db      	mvns	r3, r3
 80017e0:	4019      	ands	r1, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017fe:	e063      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b09      	cmp	r3, #9
 8001806:	d81e      	bhi.n	8001846 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	3b1e      	subs	r3, #30
 800181c:	221f      	movs	r2, #31
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	4019      	ands	r1, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	3b1e      	subs	r3, #30
 8001838:	fa00 f203 	lsl.w	r2, r0, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	@ 0x34
 8001844:	e040      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b0e      	cmp	r3, #14
 800184c:	d81e      	bhi.n	800188c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	3b3c      	subs	r3, #60	@ 0x3c
 8001862:	221f      	movs	r2, #31
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	4019      	ands	r1, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3b3c      	subs	r3, #60	@ 0x3c
 800187e:	fa00 f203 	lsl.w	r2, r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38
 800188a:	e01d      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	3b5a      	subs	r3, #90	@ 0x5a
 80018a0:	221f      	movs	r2, #31
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4019      	ands	r1, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	3b5a      	subs	r3, #90	@ 0x5a
 80018bc:	fa00 f203 	lsl.w	r2, r0, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 80e5 	bne.w	8001aa2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d91c      	bls.n	800191a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6999      	ldr	r1, [r3, #24]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3b1e      	subs	r3, #30
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6898      	ldr	r0, [r3, #8]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	3b1e      	subs	r3, #30
 800190c:	fa00 f203 	lsl.w	r2, r0, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	619a      	str	r2, [r3, #24]
 8001918:	e019      	b.n	800194e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6959      	ldr	r1, [r3, #20]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	2207      	movs	r2, #7
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	4019      	ands	r1, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6898      	ldr	r0, [r3, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	fa00 f203 	lsl.w	r2, r0, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	3b01      	subs	r3, #1
 800196c:	2b03      	cmp	r3, #3
 800196e:	d84f      	bhi.n	8001a10 <HAL_ADC_ConfigChannel+0x28c>
 8001970:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <HAL_ADC_ConfigChannel+0x1f4>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	080019ab 	.word	0x080019ab
 8001980:	080019cd 	.word	0x080019cd
 8001984:	080019ef 	.word	0x080019ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800198e:	4b9c      	ldr	r3, [pc, #624]	@ (8001c00 <HAL_ADC_ConfigChannel+0x47c>)
 8001990:	4013      	ands	r3, r2
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	0691      	lsls	r1, r2, #26
 8001998:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800199a:	430a      	orrs	r2, r1
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019a6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019a8:	e07b      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019b0:	4b93      	ldr	r3, [pc, #588]	@ (8001c00 <HAL_ADC_ConfigChannel+0x47c>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	0691      	lsls	r1, r2, #26
 80019ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019bc:	430a      	orrs	r2, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019c8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ca:	e06a      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80019d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001c00 <HAL_ADC_ConfigChannel+0x47c>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	0691      	lsls	r1, r2, #26
 80019dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019de:	430a      	orrs	r2, r1
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019ea:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ec:	e059      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80019f4:	4b82      	ldr	r3, [pc, #520]	@ (8001c00 <HAL_ADC_ConfigChannel+0x47c>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	0691      	lsls	r1, r2, #26
 80019fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a00:	430a      	orrs	r2, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001a0c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a0e:	e048      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	069b      	lsls	r3, r3, #26
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d107      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a32:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	069b      	lsls	r3, r3, #26
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a56:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	069b      	lsls	r3, r3, #26
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d107      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a7a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	069b      	lsls	r3, r3, #26
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a9e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001aa0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x33e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x33e>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x340>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 810a 	bne.w	8001cde <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00f      	beq.n	8001af2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	400a      	ands	r2, r1
 8001aec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001af0:	e049      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d91c      	bls.n	8001b4e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6999      	ldr	r1, [r3, #24]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	3b1b      	subs	r3, #27
 8001b26:	2207      	movs	r2, #7
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b1b      	subs	r3, #27
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	619a      	str	r2, [r3, #24]
 8001b4c:	e01b      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6959      	ldr	r1, [r3, #20]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	2207      	movs	r2, #7
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4019      	ands	r1, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6898      	ldr	r0, [r3, #8]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b86:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <HAL_ADC_ConfigChannel+0x480>)
 8001b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d105      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d015      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ba2:	2b11      	cmp	r3, #17
 8001ba4:	d105      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	f040 8091 	bne.w	8001cde <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 808a 	bne.w	8001cde <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bd2:	d102      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x456>
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_ADC_ConfigChannel+0x484>)
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x45c>
 8001bda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bde:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10e      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x488>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d107      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x488>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e006      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x48a>
 8001c00:	83fff000 	.word	0x83fff000
 8001c04:	50000300 	.word	0x50000300
 8001c08:	50000100 	.word	0x50000100
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d150      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d010      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x4b0>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x4b0>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x4b2>
 8001c34:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d13c      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d11d      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x4fa>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c4a:	d118      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c56:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c58:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x574>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a27      	ldr	r2, [pc, #156]	@ (8001cfc <HAL_ADC_ConfigChannel+0x578>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9a      	lsrs	r2, r3, #18
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c6e:	e002      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f9      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c7c:	e02e      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b11      	cmp	r3, #17
 8001c84:	d10b      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x51a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c8e:	d106      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c9c:	e01e      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d11a      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cb0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cb2:	e013      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001cc6:	e00a      	b.n	8001cde <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f043 0220 	orr.w	r2, r3, #32
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001cda:	e000      	b.n	8001cde <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cdc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ce6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	376c      	adds	r7, #108	@ 0x6c
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b09d      	sub	sp, #116	@ 0x74
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	66bb      	str	r3, [r7, #104]	@ 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e2fb      	b.n	800231e <HAL_ADCEx_InjectedConfigChannel+0x61e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d132      	bne.n	8001da4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d124      	bne.n	8001d90 <HAL_ADCEx_InjectedConfigChannel+0x90>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d00c      	beq.n	8001d68 <HAL_ADCEx_InjectedConfigChannel+0x68>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	021a      	lsls	r2, r3, #8
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001d62:	4313      	orrs	r3, r2
 8001d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d66:	e005      	b.n	8001d74 <HAL_ADCEx_InjectedConfigChannel+0x74>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001d70:	4313      	orrs	r3, r2
 8001d72:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8001fec <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001d84:	430b      	orrs	r3, r1
 8001d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001d8c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001d8e:	e060      	b.n	8001e52 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001da2:	e056      	b.n	8001e52 <HAL_ADCEx_InjectedConfigChannel+0x152>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d121      	bne.n	8001df0 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	649a      	str	r2, [r3, #72]	@ 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d00e      	beq.n	8001de0 <HAL_ADCEx_InjectedConfigChannel+0xe0>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	1e59      	subs	r1, r3, #1
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4319      	orrs	r1, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	649a      	str	r2, [r3, #72]	@ 0x48
 8001dde:	e007      	b.n	8001df0 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	649a      	str	r2, [r3, #72]	@ 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	3302      	adds	r3, #2
 8001e02:	221f      	movs	r2, #31
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4019      	ands	r1, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	fa00 f303 	lsl.w	r3, r0, r3
 8001e22:	ea41 0203 	orr.w	r2, r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	649a      	str	r2, [r3, #72]	@ 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	1e5a      	subs	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	64da      	str	r2, [r3, #76]	@ 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_ADCEx_InjectedConfigChannel+0x152>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e42:	4b6a      	ldr	r3, [pc, #424]	@ (8001fec <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d12d      	bne.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0x1bc>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7f5b      	ldrb	r3, [r3, #29]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d110      	bne.n	8001e8a <HAL_ADCEx_InjectedConfigChannel+0x18a>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	7f9b      	ldrb	r3, [r3, #30]
 8001e76:	055a      	lsls	r2, r3, #21
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	7f1b      	ldrb	r3, [r3, #28]
 8001e7c:	051b      	lsls	r3, r3, #20
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	e018      	b.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	7f9b      	ldrb	r3, [r3, #30]
 8001e98:	055a      	lsls	r2, r3, #21
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	7f1b      	ldrb	r3, [r3, #28]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0x1bc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f043 0220 	orr.w	r2, r3, #32
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 8110 	bne.w	80020ec <HAL_ADCEx_InjectedConfigChannel+0x3ec>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10c      	bne.n	8001eee <HAL_ADCEx_InjectedConfigChannel+0x1ee>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	7f5b      	ldrb	r3, [r3, #29]
 8001ee2:	065a      	lsls	r2, r3, #25
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	e014      	b.n	8001f18 <HAL_ADCEx_InjectedConfigChannel+0x218>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8001efc:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7f5b      	ldrb	r3, [r3, #29]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d91c      	bls.n	8001f5a <HAL_ADCEx_InjectedConfigChannel+0x25a>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6999      	ldr	r1, [r3, #24]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b1e      	subs	r3, #30
 8001f32:	2207      	movs	r2, #7
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6898      	ldr	r0, [r3, #8]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b1e      	subs	r3, #30
 8001f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	619a      	str	r2, [r3, #24]
 8001f58:	e019      	b.n	8001f8e <HAL_ADCEx_InjectedConfigChannel+0x28e>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6959      	ldr	r1, [r3, #20]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4019      	ands	r1, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6898      	ldr	r0, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	fa00 f203 	lsl.w	r2, r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d854      	bhi.n	800205a <HAL_ADCEx_InjectedConfigChannel+0x35a>
 8001fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb8 <HAL_ADCEx_InjectedConfigChannel+0x2b8>)
 8001fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb6:	bf00      	nop
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001ff5 	.word	0x08001ff5
 8001fc0:	08002017 	.word	0x08002017
 8001fc4:	08002039 	.word	0x08002039
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	0691      	lsls	r1, r2, #26
 8001fd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001fe6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8001fe8:	e080      	b.n	80020ec <HAL_ADCEx_InjectedConfigChannel+0x3ec>
 8001fea:	bf00      	nop
 8001fec:	82082000 	.word	0x82082000
 8001ff0:	83fff000 	.word	0x83fff000
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ffa:	4b93      	ldr	r3, [pc, #588]	@ (8002248 <HAL_ADCEx_InjectedConfigChannel+0x548>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	0691      	lsls	r1, r2, #26
 8002004:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002006:	430a      	orrs	r2, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002012:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002014:	e06a      	b.n	80020ec <HAL_ADCEx_InjectedConfigChannel+0x3ec>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800201c:	4b8a      	ldr	r3, [pc, #552]	@ (8002248 <HAL_ADCEx_InjectedConfigChannel+0x548>)
 800201e:	4013      	ands	r3, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	0691      	lsls	r1, r2, #26
 8002026:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002028:	430a      	orrs	r2, r1
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002034:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002036:	e059      	b.n	80020ec <HAL_ADCEx_InjectedConfigChannel+0x3ec>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800203e:	4b82      	ldr	r3, [pc, #520]	@ (8002248 <HAL_ADCEx_InjectedConfigChannel+0x548>)
 8002040:	4013      	ands	r3, r2
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	0691      	lsls	r1, r2, #26
 8002048:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800204a:	430a      	orrs	r2, r1
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002056:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002058:	e048      	b.n	80020ec <HAL_ADCEx_InjectedConfigChannel+0x3ec>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002060:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	069b      	lsls	r3, r3, #26
 800206a:	429a      	cmp	r2, r3
 800206c:	d107      	bne.n	800207e <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800207c:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002084:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	069b      	lsls	r3, r3, #26
 800208e:	429a      	cmp	r2, r3
 8002090:	d107      	bne.n	80020a2 <HAL_ADCEx_InjectedConfigChannel+0x3a2>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020a0:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	069b      	lsls	r3, r3, #26
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d107      	bne.n	80020c6 <HAL_ADCEx_InjectedConfigChannel+0x3c6>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020c4:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	069b      	lsls	r3, r3, #26
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d107      	bne.n	80020ea <HAL_ADCEx_InjectedConfigChannel+0x3ea>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80020ea:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_ADCEx_InjectedConfigChannel+0x40c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADCEx_InjectedConfigChannel+0x40c>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_ADCEx_InjectedConfigChannel+0x40e>
 800210c:	2300      	movs	r3, #0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 80ff 	bne.w	8002312 <HAL_ADCEx_InjectedConfigChannel+0x612>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d00f      	beq.n	800213c <HAL_ADCEx_InjectedConfigChannel+0x43c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800213a:	e049      	b.n	80021d0 <HAL_ADCEx_InjectedConfigChannel+0x4d0>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	409a      	lsls	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b09      	cmp	r3, #9
 800215c:	d91c      	bls.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x498>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6999      	ldr	r1, [r3, #24]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	3b1b      	subs	r3, #27
 8002170:	2207      	movs	r2, #7
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	4019      	ands	r1, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6898      	ldr	r0, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	3b1b      	subs	r3, #27
 800218a:	fa00 f203 	lsl.w	r2, r0, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	619a      	str	r2, [r3, #24]
 8002196:	e01b      	b.n	80021d0 <HAL_ADCEx_InjectedConfigChannel+0x4d0>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6959      	ldr	r1, [r3, #20]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	2207      	movs	r2, #7
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4019      	ands	r1, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6898      	ldr	r0, [r3, #8]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	fa00 f203 	lsl.w	r2, r0, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d0:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_ADCEx_InjectedConfigChannel+0x54c>)
 80021d2:	663b      	str	r3, [r7, #96]	@ 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d105      	bne.n	80021e8 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d014      	beq.n	8002212 <HAL_ADCEx_InjectedConfigChannel+0x512>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021ec:	2b11      	cmp	r3, #17
 80021ee:	d105      	bne.n	80021fc <HAL_ADCEx_InjectedConfigChannel+0x4fc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_ADCEx_InjectedConfigChannel+0x512>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002200:	2b12      	cmp	r3, #18
 8002202:	f040 8086 	bne.w	8002312 <HAL_ADCEx_InjectedConfigChannel+0x612>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d17f      	bne.n	8002312 <HAL_ADCEx_InjectedConfigChannel+0x612>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800221a:	d102      	bne.n	8002222 <HAL_ADCEx_InjectedConfigChannel+0x522>
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_ADCEx_InjectedConfigChannel+0x550>)
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e002      	b.n	8002228 <HAL_ADCEx_InjectedConfigChannel+0x528>
 8002222:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002226:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10e      	bne.n	8002254 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8002244:	2301      	movs	r3, #1
 8002246:	e006      	b.n	8002256 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8002248:	83fff000 	.word	0x83fff000
 800224c:	50000300 	.word	0x50000300
 8002250:	50000100 	.word	0x50000100
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d150      	bne.n	80022fc <HAL_ADCEx_InjectedConfigChannel+0x5fc>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800225a:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_ADCEx_InjectedConfigChannel+0x582>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_ADCEx_InjectedConfigChannel+0x57c>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_ADCEx_InjectedConfigChannel+0x57c>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_ADCEx_InjectedConfigChannel+0x57e>
 800227c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800227e:	2b00      	cmp	r3, #0
 8002280:	d13c      	bne.n	80022fc <HAL_ADCEx_InjectedConfigChannel+0x5fc>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b10      	cmp	r3, #16
 8002288:	d11d      	bne.n	80022c6 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002292:	d118      	bne.n	80022c6 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800229c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800229e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022a0:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_ADCEx_InjectedConfigChannel+0x62c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a22      	ldr	r2, [pc, #136]	@ (8002330 <HAL_ADCEx_InjectedConfigChannel+0x630>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9a      	lsrs	r2, r3, #18
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80022b6:	e002      	b.n	80022be <HAL_ADCEx_InjectedConfigChannel+0x5be>
          {
            wait_loop_index--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c4:	e024      	b.n	8002310 <HAL_ADCEx_InjectedConfigChannel+0x610>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b11      	cmp	r3, #17
 80022cc:	d10b      	bne.n	80022e6 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022d6:	d106      	bne.n	80022e6 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80022e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022e2:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022e4:	e014      	b.n	8002310 <HAL_ADCEx_InjectedConfigChannel+0x610>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b12      	cmp	r3, #18
 80022ec:	d110      	bne.n	8002310 <HAL_ADCEx_InjectedConfigChannel+0x610>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f8:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022fa:	e009      	b.n	8002310 <HAL_ADCEx_InjectedConfigChannel+0x610>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800230e:	e000      	b.n	8002312 <HAL_ADCEx_InjectedConfigChannel+0x612>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002310:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800231a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800231e:	4618      	mov	r0, r3
 8002320:	3774      	adds	r7, #116	@ 0x74
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000000 	.word	0x20000000
 8002330:	431bde83 	.word	0x431bde83

08002334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002334:	b480      	push	{r7}
 8002336:	b099      	sub	sp, #100	@ 0x64
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234c:	d102      	bne.n	8002354 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800234e:	4b5a      	ldr	r3, [pc, #360]	@ (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	e002      	b.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002354:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002358:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0a2      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800236e:	2302      	movs	r3, #2
 8002370:	e09b      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d17f      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d179      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002394:	4b49      	ldr	r3, [pc, #292]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002396:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d040      	beq.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023b2:	035b      	lsls	r3, r3, #13
 80023b4:	430b      	orrs	r3, r1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ba:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d15c      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80023fe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d14b      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800240c:	f023 030f 	bic.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	6811      	ldr	r1, [r2, #0]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	430a      	orrs	r2, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800241e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002420:	e03c      	b.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800242a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800242c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d108      	bne.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d123      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002470:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800247e:	f023 030f 	bic.w	r3, r3, #15
 8002482:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002484:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002486:	e009      	b.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800249a:	e000      	b.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800249c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80024aa:	4618      	mov	r0, r3
 80024ac:	3764      	adds	r7, #100	@ 0x64
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	50000100 	.word	0x50000100
 80024bc:	50000300 	.word	0x50000300

080024c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d108      	bne.n	80024ec <ADC_Enable+0x2c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <ADC_Enable+0x2c>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <ADC_Enable+0x2e>
 80024ec:	2300      	movs	r3, #0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d143      	bne.n	800257a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <ADC_Enable+0xc4>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e02f      	b.n	800257c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800252c:	f7fe fd38 	bl	8000fa0 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002532:	e01b      	b.n	800256c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002534:	f7fe fd34 	bl	8000fa0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d914      	bls.n	800256c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d00d      	beq.n	800256c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f043 0210 	orr.w	r2, r3, #16
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e007      	b.n	800257c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d1dc      	bne.n	8002534 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	8000003f 	.word	0x8000003f

08002588 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <ADC_Disable+0x2c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <ADC_Disable+0x2c>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <ADC_Disable+0x2e>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d047      	beq.n	800264a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030d 	and.w	r3, r3, #13
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10f      	bne.n	80025e8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0202 	orr.w	r2, r2, #2
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2203      	movs	r2, #3
 80025de:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fcde 	bl	8000fa0 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025e6:	e029      	b.n	800263c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e023      	b.n	800264c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002604:	f7fe fccc 	bl	8000fa0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d914      	bls.n	800263c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10d      	bne.n	800263c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f043 0210 	orr.w	r2, r3, #16
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e007      	b.n	800264c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d0dc      	beq.n	8002604 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 809b 	beq.w	80027b0 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002688:	d12a      	bne.n	80026e0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800268e:	2b01      	cmp	r3, #1
 8002690:	d126      	bne.n	80026e0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002696:	2b01      	cmp	r3, #1
 8002698:	d122      	bne.n	80026e0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800269a:	230c      	movs	r3, #12
 800269c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800269e:	e014      	b.n	80026ca <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4a46      	ldr	r2, [pc, #280]	@ (80027bc <ADC_ConversionStop+0x168>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d90d      	bls.n	80026c4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e076      	b.n	80027b2 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	3301      	adds	r3, #1
 80026c8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b40      	cmp	r3, #64	@ 0x40
 80026d6:	d1e3      	bne.n	80026a0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2240      	movs	r2, #64	@ 0x40
 80026de:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b60      	cmp	r3, #96	@ 0x60
 80026e4:	d015      	beq.n	8002712 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d10e      	bne.n	8002712 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0210 	orr.w	r2, r2, #16
 8002710:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d015      	beq.n	8002744 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d10e      	bne.n	8002744 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b60      	cmp	r3, #96	@ 0x60
 8002748:	d005      	beq.n	8002756 <ADC_ConversionStop+0x102>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b6c      	cmp	r3, #108	@ 0x6c
 800274e:	d105      	bne.n	800275c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002750:	230c      	movs	r3, #12
 8002752:	617b      	str	r3, [r7, #20]
        break;
 8002754:	e005      	b.n	8002762 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002756:	2308      	movs	r3, #8
 8002758:	617b      	str	r3, [r7, #20]
        break;
 800275a:	e002      	b.n	8002762 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800275c:	2304      	movs	r3, #4
 800275e:	617b      	str	r3, [r7, #20]
        break;
 8002760:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002762:	f7fe fc1d 	bl	8000fa0 <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002768:	e01b      	b.n	80027a2 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800276a:	f7fe fc19 	bl	8000fa0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b0b      	cmp	r3, #11
 8002776:	d914      	bls.n	80027a2 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e007      	b.n	80027b2 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1dc      	bne.n	800276a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	000993ff 	.word	0x000993ff

080027c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	4907      	ldr	r1, [pc, #28]	@ (800285c <__NVIC_EnableIRQ+0x38>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	@ (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	@ (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf28      	it	cs
 80028d2:	2304      	movcs	r3, #4
 80028d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3304      	adds	r3, #4
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d902      	bls.n	80028e4 <NVIC_EncodePriority+0x30>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	e000      	b.n	80028e6 <NVIC_EncodePriority+0x32>
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	401a      	ands	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43d9      	mvns	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	4313      	orrs	r3, r2
         );
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	@ 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800292c:	d301      	bcc.n	8002932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292e:	2301      	movs	r3, #1
 8002930:	e00f      	b.n	8002952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002932:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <SysTick_Config+0x40>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293a:	210f      	movs	r1, #15
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f7ff ff8e 	bl	8002860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <SysTick_Config+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <SysTick_Config+0x40>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff29 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff3e 	bl	8002808 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff8e 	bl	80028b4 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff5d 	bl	8002860 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff31 	bl	8002824 <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffa2 	bl	800291c <SysTick_Config>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d005      	beq.n	8002a04 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2204      	movs	r2, #4
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e027      	b.n	8002a54 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 020e 	bic.w	r2, r2, #14
 8002a12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
    }
  }
  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	e14e      	b.n	8002d26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8140 	beq.w	8002d20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d005      	beq.n	8002ab8 <HAL_GPIO_Init+0x40>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d130      	bne.n	8002b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aee:	2201      	movs	r2, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0201 	and.w	r2, r3, #1
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d017      	beq.n	8002b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d123      	bne.n	8002baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	6939      	ldr	r1, [r7, #16]
 8002ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0203 	and.w	r2, r3, #3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 809a 	beq.w	8002d20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bec:	4b55      	ldr	r3, [pc, #340]	@ (8002d44 <HAL_GPIO_Init+0x2cc>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4a54      	ldr	r2, [pc, #336]	@ (8002d44 <HAL_GPIO_Init+0x2cc>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6193      	str	r3, [r2, #24]
 8002bf8:	4b52      	ldr	r3, [pc, #328]	@ (8002d44 <HAL_GPIO_Init+0x2cc>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c04:	4a50      	ldr	r2, [pc, #320]	@ (8002d48 <HAL_GPIO_Init+0x2d0>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c2e:	d013      	beq.n	8002c58 <HAL_GPIO_Init+0x1e0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a46      	ldr	r2, [pc, #280]	@ (8002d4c <HAL_GPIO_Init+0x2d4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00d      	beq.n	8002c54 <HAL_GPIO_Init+0x1dc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a45      	ldr	r2, [pc, #276]	@ (8002d50 <HAL_GPIO_Init+0x2d8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <HAL_GPIO_Init+0x1d8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a44      	ldr	r2, [pc, #272]	@ (8002d54 <HAL_GPIO_Init+0x2dc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_GPIO_Init+0x1d4>
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e006      	b.n	8002c5a <HAL_GPIO_Init+0x1e2>
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	e004      	b.n	8002c5a <HAL_GPIO_Init+0x1e2>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e002      	b.n	8002c5a <HAL_GPIO_Init+0x1e2>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_GPIO_Init+0x1e2>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	f002 0203 	and.w	r2, r2, #3
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	4093      	lsls	r3, r2
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c6a:	4937      	ldr	r1, [pc, #220]	@ (8002d48 <HAL_GPIO_Init+0x2d0>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c78:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cc6:	4a24      	ldr	r2, [pc, #144]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ccc:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cf0:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf6:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d58 <HAL_GPIO_Init+0x2e0>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3301      	adds	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f aea9 	bne.w	8002a88 <HAL_GPIO_Init+0x10>
  }
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	48000400 	.word	0x48000400
 8002d50:	48000800 	.word	0x48000800
 8002d54:	48000c00 	.word	0x48000c00
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e08d      	b.n	8002eba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd fcaa 	bl	800070c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	@ 0x24
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ddc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	e006      	b.n	8002e14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d108      	bne.n	8002e2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	e007      	b.n	8002e3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d156      	bne.n	8002f8c <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_I2C_Slave_Transmit_IT+0x28>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e050      	b.n	8002f8e <HAL_I2C_Slave_Transmit_IT+0xca>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2221      	movs	r2, #33	@ 0x21
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f18:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a19      	ldr	r2, [pc, #100]	@ (8002f98 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a18      	ldr	r2, [pc, #96]	@ (8002f9c <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8002f3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f44:	d117      	bne.n	8002f76 <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002f7e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f001 fa7c 	bl	8004480 <I2C_Enable_IRQ>

    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
  }
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	ffff0000 	.word	0xffff0000
 8002f9c:	08003213 	.word	0x08003213

08002fa0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d139      	bne.n	800302e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2C_Slave_Receive_IT+0x28>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e033      	b.n	8003030 <HAL_I2C_Slave_Receive_IT+0x90>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2222      	movs	r2, #34	@ 0x22
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <HAL_I2C_Slave_Receive_IT+0x98>)
 8003010:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a09      	ldr	r2, [pc, #36]	@ (800303c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003020:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f001 fa2b 	bl	8004480 <I2C_Enable_IRQ>

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	ffff0000 	.word	0xffff0000
 800303c:	08003213 	.word	0x08003213

08003040 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	d10d      	bne.n	8003070 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2228      	movs	r2, #40	@ 0x28
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a07      	ldr	r2, [pc, #28]	@ (800307c <HAL_I2C_EnableListen_IT+0x3c>)
 8003060:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f001 fa0a 	bl	8004480 <I2C_Enable_IRQ>

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	08003213 	.word	0x08003213

08003080 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
  }
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00f      	beq.n	80030f6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00f      	beq.n	8003120 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800311e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00f      	beq.n	800314a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	f043 0202 	orr.w	r2, r3, #2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003148:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 030b 	and.w	r3, r3, #11
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f001 f803 	bl	8004168 <I2C_ITError>
  }
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	70fb      	strb	r3, [r7, #3]
 800319e:	4613      	mov	r3, r2
 80031a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <I2C_Slave_ISR_IT+0x24>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e2      	b.n	80033fc <I2C_Slave_ISR_IT+0x1ea>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003252:	6939      	ldr	r1, [r7, #16]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fdcf 	bl	8003df8 <I2C_ITSlaveCplt>
 800325a:	e0ca      	b.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04b      	beq.n	80032fe <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800326c:	2b00      	cmp	r3, #0
 800326e:	d046      	beq.n	80032fe <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d128      	bne.n	80032cc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b28      	cmp	r3, #40	@ 0x28
 8003284:	d108      	bne.n	8003298 <I2C_Slave_ISR_IT+0x86>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800328c:	d104      	bne.n	8003298 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800328e:	6939      	ldr	r1, [r7, #16]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 ff15 	bl	80040c0 <I2C_ITListenCplt>
 8003296:	e031      	b.n	80032fc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b29      	cmp	r3, #41	@ 0x29
 80032a2:	d10e      	bne.n	80032c2 <I2C_Slave_ISR_IT+0xb0>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032aa:	d00a      	beq.n	80032c2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2210      	movs	r2, #16
 80032b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f001 f86e 	bl	8004396 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fc78 	bl	8003bb0 <I2C_ITSlaveSeqCplt>
 80032c0:	e01c      	b.n	80032fc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80032ca:	e08f      	b.n	80033ec <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2210      	movs	r2, #16
 80032d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	f043 0204 	orr.w	r2, r3, #4
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <I2C_Slave_ISR_IT+0xdc>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ec:	d17e      	bne.n	80033ec <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	4619      	mov	r1, r3
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 ff37 	bl	8004168 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80032fa:	e077      	b.n	80033ec <I2C_Slave_ISR_IT+0x1da>
 80032fc:	e076      	b.n	80033ec <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d02f      	beq.n	8003368 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02a      	beq.n	8003368 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d14b      	bne.n	80033f0 <I2C_Slave_ISR_IT+0x1de>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800335e:	d047      	beq.n	80033f0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fc25 	bl	8003bb0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003366:	e043      	b.n	80033f0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800337c:	6939      	ldr	r1, [r7, #16]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fb55 	bl	8003a2e <I2C_ITAddrCplt>
 8003384:	e035      	b.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d030      	beq.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02b      	beq.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d018      	beq.n	80033d6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80033d4:	e00d      	b.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033dc:	d002      	beq.n	80033e4 <I2C_Slave_ISR_IT+0x1d2>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fbe3 	bl	8003bb0 <I2C_ITSlaveSeqCplt>
 80033ea:	e002      	b.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80033ec:	bf00      	nop
 80033ee:	e000      	b.n	80033f2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80033f0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <I2C_Master_ISR_DMA+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e0e7      	b.n	80035ee <I2C_Master_ISR_DMA+0x1ea>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d016      	beq.n	800345e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003436:	2b00      	cmp	r3, #0
 8003438:	d011      	beq.n	800345e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2210      	movs	r2, #16
 8003440:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	f043 0204 	orr.w	r2, r3, #4
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800344e:	2120      	movs	r1, #32
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f001 f815 	bl	8004480 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 ff9d 	bl	8004396 <I2C_Flush_TXDR>
 800345c:	e0c2      	b.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d07f      	beq.n	8003568 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800346e:	2b00      	cmp	r3, #0
 8003470:	d07a      	beq.n	8003568 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003480:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05c      	beq.n	8003546 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003498:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2bff      	cmp	r3, #255	@ 0xff
 80034a2:	d914      	bls.n	80034ce <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d103      	bne.n	80034c0 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80034be:	e002      	b.n	80034c6 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	22ff      	movs	r2, #255	@ 0xff
 80034c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80034c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e010      	b.n	80034f0 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034e0:	d003      	beq.n	80034ea <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	e002      	b.n	80034f0 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80034ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ee:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	8a79      	ldrh	r1, [r7, #18]
 80034f8:	2300      	movs	r3, #0
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 ff8c 	bl	800441c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b22      	cmp	r3, #34	@ 0x22
 8003520:	d108      	bne.n	8003534 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003530:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003532:	e057      	b.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003542:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003544:	e04e      	b.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003550:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003554:	d003      	beq.n	800355e <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 faed 	bl	8003b36 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800355c:	e042      	b.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800355e:	2140      	movs	r1, #64	@ 0x40
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fe01 	bl	8004168 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003566:	e03d      	b.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d028      	beq.n	80035c4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003578:	2b00      	cmp	r3, #0
 800357a:	d023      	beq.n	80035c4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d119      	bne.n	80035ba <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003594:	d025      	beq.n	80035e2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800359e:	d108      	bne.n	80035b2 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ae:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80035b0:	e017      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fabf 	bl	8003b36 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80035b8:	e013      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80035ba:	2140      	movs	r1, #64	@ 0x40
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fdd3 	bl	8004168 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80035c2:	e00e      	b.n	80035e2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fb44 	bl	8003c68 <I2C_ITMasterCplt>
 80035e0:	e000      	b.n	80035e4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80035e2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003604:	4b90      	ldr	r3, [pc, #576]	@ (8003848 <I2C_Mem_ISR_DMA+0x250>)
 8003606:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <I2C_Mem_ISR_DMA+0x1e>
 8003612:	2302      	movs	r3, #2
 8003614:	e12f      	b.n	8003876 <I2C_Mem_ISR_DMA+0x27e>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d016      	beq.n	8003656 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800362e:	2b00      	cmp	r3, #0
 8003630:	d011      	beq.n	8003656 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2210      	movs	r2, #16
 8003638:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f043 0204 	orr.w	r2, r3, #4
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003646:	2120      	movs	r1, #32
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 ff19 	bl	8004480 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fea1 	bl	8004396 <I2C_Flush_TXDR>
 8003654:	e10a      	b.n	800386c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f04f 32ff 	mov.w	r2, #4294967295
 800367a:	651a      	str	r2, [r3, #80]	@ 0x50
 800367c:	e0f6      	b.n	800386c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d06d      	beq.n	8003764 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800368e:	2b00      	cmp	r3, #0
 8003690:	d068      	beq.n	8003764 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003692:	2101      	movs	r1, #1
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 ff77 	bl	8004588 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800369a:	2110      	movs	r1, #16
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 feef 	bl	8004480 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d056      	beq.n	800375a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d91e      	bls.n	80036f4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d103      	bne.n	80036d2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
 80036d0:	e002      	b.n	80036d8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	@ 0xff
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036dc:	b299      	uxth	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fe95 	bl	800441c <I2C_TransferConfig>
 80036f2:	e011      	b.n	8003718 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003702:	b299      	uxth	r1, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003708:	b2da      	uxtb	r2, r3
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fe82 	bl	800441c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b22      	cmp	r3, #34	@ 0x22
 8003734:	d108      	bne.n	8003748 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003744:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003746:	e091      	b.n	800386c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003756:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003758:	e088      	b.n	800386c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800375a:	2140      	movs	r1, #64	@ 0x40
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fd03 	bl	8004168 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003762:	e083      	b.n	800386c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d070      	beq.n	8003850 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003774:	2b00      	cmp	r3, #0
 8003776:	d06b      	beq.n	8003850 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003778:	2101      	movs	r1, #1
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 ff04 	bl	8004588 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003780:	2110      	movs	r1, #16
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fe7c 	bl	8004480 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b22      	cmp	r3, #34	@ 0x22
 8003792:	d101      	bne.n	8003798 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8003794:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <I2C_Mem_ISR_DMA+0x254>)
 8003796:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2bff      	cmp	r3, #255	@ 0xff
 80037a0:	d91e      	bls.n	80037e0 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d103      	bne.n	80037be <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80037bc:	e002      	b.n	80037c4 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	22ff      	movs	r2, #255	@ 0xff
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c8:	b299      	uxth	r1, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fe1f 	bl	800441c <I2C_TransferConfig>
 80037de:	e011      	b.n	8003804 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	b299      	uxth	r1, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fe0c 	bl	800441c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b22      	cmp	r3, #34	@ 0x22
 8003820:	d108      	bne.n	8003834 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003830:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003832:	e01b      	b.n	800386c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003842:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003844:	e012      	b.n	800386c <I2C_Mem_ISR_DMA+0x274>
 8003846:	bf00      	nop
 8003848:	80002000 	.word	0x80002000
 800384c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f9fe 	bl	8003c68 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop

08003880 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <I2C_Slave_ISR_DMA+0x24>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e0c0      	b.n	8003a26 <I2C_Slave_ISR_DMA+0x1a6>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fa98 	bl	8003df8 <I2C_ITSlaveCplt>
 80038c8:	e0a8      	b.n	8003a1c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8095 	beq.w	8003a00 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 808f 	beq.w	8003a00 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d07d      	beq.n	80039f2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00c      	beq.n	800393a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8003936:	2301      	movs	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d128      	bne.n	8003992 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b28      	cmp	r3, #40	@ 0x28
 800394a:	d108      	bne.n	800395e <I2C_Slave_ISR_DMA+0xde>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003952:	d104      	bne.n	800395e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fbb2 	bl	80040c0 <I2C_ITListenCplt>
 800395c:	e048      	b.n	80039f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b29      	cmp	r3, #41	@ 0x29
 8003968:	d10e      	bne.n	8003988 <I2C_Slave_ISR_DMA+0x108>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003970:	d00a      	beq.n	8003988 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2210      	movs	r2, #16
 8003978:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fd0b 	bl	8004396 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f915 	bl	8003bb0 <I2C_ITSlaveSeqCplt>
 8003986:	e033      	b.n	80039f0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003990:	e034      	b.n	80039fc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f043 0204 	orr.w	r2, r3, #4
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <I2C_Slave_ISR_DMA+0x13c>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039ba:	d11f      	bne.n	80039fc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b21      	cmp	r3, #33	@ 0x21
 80039c0:	d002      	beq.n	80039c8 <I2C_Slave_ISR_DMA+0x148>
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b29      	cmp	r3, #41	@ 0x29
 80039c6:	d103      	bne.n	80039d0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	@ 0x21
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80039ce:	e008      	b.n	80039e2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b22      	cmp	r3, #34	@ 0x22
 80039d4:	d002      	beq.n	80039dc <I2C_Slave_ISR_DMA+0x15c>
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039da:	d102      	bne.n	80039e2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2222      	movs	r2, #34	@ 0x22
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	4619      	mov	r1, r3
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fbbd 	bl	8004168 <I2C_ITError>
      if (treatdmanack == 1U)
 80039ee:	e005      	b.n	80039fc <I2C_Slave_ISR_DMA+0x17c>
 80039f0:	e004      	b.n	80039fc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2210      	movs	r2, #16
 80039f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039fa:	e00f      	b.n	8003a1c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80039fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039fe:	e00d      	b.n	8003a1c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f809 	bl	8003a2e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a44:	2b28      	cmp	r3, #40	@ 0x28
 8003a46:	d16a      	bne.n	8003b1e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003a66:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a74:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003a82:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d138      	bne.n	8003afe <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	09db      	lsrs	r3, r3, #7
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	89bb      	ldrh	r3, [r7, #12]
 8003a94:	4053      	eors	r3, r2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f003 0306 	and.w	r3, r3, #6
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11c      	bne.n	8003ada <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003aa0:	897b      	ldrh	r3, [r7, #10]
 8003aa2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d13b      	bne.n	8003b2e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003acc:	89ba      	ldrh	r2, [r7, #12]
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fb5d 	bl	8003192 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ad8:	e029      	b.n	8003b2e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003ada:	893b      	ldrh	r3, [r7, #8]
 8003adc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ade:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fd50 	bl	8004588 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003af0:	89ba      	ldrh	r2, [r7, #12]
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fb4b 	bl	8003192 <HAL_I2C_AddrCallback>
}
 8003afc:	e017      	b.n	8003b2e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003afe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fd40 	bl	8004588 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b10:	89ba      	ldrh	r2, [r7, #12]
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fb3b 	bl	8003192 <HAL_I2C_AddrCallback>
}
 8003b1c:	e007      	b.n	8003b2e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2208      	movs	r2, #8
 8003b24:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b21      	cmp	r3, #33	@ 0x21
 8003b50:	d115      	bne.n	8003b7e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2211      	movs	r2, #17
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b66:	2101      	movs	r1, #1
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fd0d 	bl	8004588 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff faf7 	bl	800316a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b7c:	e014      	b.n	8003ba8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2212      	movs	r2, #18
 8003b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b92:	2102      	movs	r1, #2
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fcf7 	bl	8004588 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff faeb 	bl	800317e <HAL_I2C_MasterRxCpltCallback>
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e00c      	b.n	8003bfe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bfc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b29      	cmp	r3, #41	@ 0x29
 8003c08:	d112      	bne.n	8003c30 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2228      	movs	r2, #40	@ 0x28
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2221      	movs	r2, #33	@ 0x21
 8003c16:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c18:	2101      	movs	r1, #1
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fcb4 	bl	8004588 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7fd f827 	bl	8000c7c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c2e:	e017      	b.n	8003c60 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c3a:	d111      	bne.n	8003c60 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2228      	movs	r2, #40	@ 0x28
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2222      	movs	r2, #34	@ 0x22
 8003c48:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fc9b 	bl	8004588 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fc ff9a 	bl	8000b94 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b21      	cmp	r3, #33	@ 0x21
 8003c88:	d107      	bne.n	8003c9a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fc7b 	bl	8004588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2211      	movs	r2, #17
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c98:	e00c      	b.n	8003cb4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b22      	cmp	r3, #34	@ 0x22
 8003ca4:	d106      	bne.n	8003cb4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fc6d 	bl	8004588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2212      	movs	r2, #18
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8003df0 <I2C_ITMasterCplt+0x188>)
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a49      	ldr	r2, [pc, #292]	@ (8003df4 <I2C_ITMasterCplt+0x18c>)
 8003cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2210      	movs	r2, #16
 8003ce0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b60      	cmp	r3, #96	@ 0x60
 8003cf8:	d10a      	bne.n	8003d10 <I2C_ITMasterCplt+0xa8>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb40 	bl	8004396 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b60      	cmp	r3, #96	@ 0x60
 8003d26:	d002      	beq.n	8003d2e <I2C_ITMasterCplt+0xc6>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fa17 	bl	8004168 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d3a:	e054      	b.n	8003de6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b21      	cmp	r3, #33	@ 0x21
 8003d46:	d124      	bne.n	8003d92 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	d10b      	bne.n	8003d7a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fa25 	bl	80031c2 <HAL_I2C_MemTxCpltCallback>
}
 8003d78:	e035      	b.n	8003de6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff f9ed 	bl	800316a <HAL_I2C_MasterTxCpltCallback>
}
 8003d90:	e029      	b.n	8003de6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b22      	cmp	r3, #34	@ 0x22
 8003d9c:	d123      	bne.n	8003de6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b40      	cmp	r3, #64	@ 0x40
 8003db6:	d10b      	bne.n	8003dd0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fa04 	bl	80031d6 <HAL_I2C_MemRxCpltCallback>
}
 8003dce:	e00a      	b.n	8003de6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff f9cc 	bl	800317e <HAL_I2C_MasterRxCpltCallback>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	fe00e800 	.word	0xfe00e800
 8003df4:	ffff0000 	.word	0xffff0000

08003df8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2220      	movs	r2, #32
 8003e22:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	2b21      	cmp	r3, #33	@ 0x21
 8003e28:	d002      	beq.n	8003e30 <I2C_ITSlaveCplt+0x38>
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	2b29      	cmp	r3, #41	@ 0x29
 8003e2e:	d108      	bne.n	8003e42 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003e30:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fba7 	bl	8004588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2221      	movs	r2, #33	@ 0x21
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e40:	e019      	b.n	8003e76 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	2b22      	cmp	r3, #34	@ 0x22
 8003e46:	d002      	beq.n	8003e4e <I2C_ITSlaveCplt+0x56>
 8003e48:	7afb      	ldrb	r3, [r7, #11]
 8003e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e4c:	d108      	bne.n	8003e60 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003e4e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb98 	bl	8004588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2222      	movs	r2, #34	@ 0x22
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e5e:	e00a      	b.n	8003e76 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	2b28      	cmp	r3, #40	@ 0x28
 8003e64:	d107      	bne.n	8003e76 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003e66:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fb8c 	bl	8004588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e84:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b89      	ldr	r3, [pc, #548]	@ (80040b8 <I2C_ITSlaveCplt+0x2c0>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa7d 	bl	8004396 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d013      	beq.n	8003ece <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003eb4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01f      	beq.n	8003efe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ecc:	e017      	b.n	8003efe <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ee6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f023 0304 	bic.w	r3, r3, #4
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00c      	beq.n	8003f4a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	f043 0204 	orr.w	r2, r3, #4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d049      	beq.n	8003ffe <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d044      	beq.n	8003ffe <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d128      	bne.n	8003fd0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b28      	cmp	r3, #40	@ 0x28
 8003f88:	d108      	bne.n	8003f9c <I2C_ITSlaveCplt+0x1a4>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f90:	d104      	bne.n	8003f9c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f92:	6979      	ldr	r1, [r7, #20]
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f893 	bl	80040c0 <I2C_ITListenCplt>
 8003f9a:	e030      	b.n	8003ffe <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b29      	cmp	r3, #41	@ 0x29
 8003fa6:	d10e      	bne.n	8003fc6 <I2C_ITSlaveCplt+0x1ce>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fae:	d00a      	beq.n	8003fc6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f9ec 	bl	8004396 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fdf6 	bl	8003bb0 <I2C_ITSlaveSeqCplt>
 8003fc4:	e01b      	b.n	8003ffe <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2210      	movs	r2, #16
 8003fcc:	61da      	str	r2, [r3, #28]
 8003fce:	e016      	b.n	8003ffe <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <I2C_ITSlaveCplt+0x1fa>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ff0:	d105      	bne.n	8003ffe <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8b5 	bl	8004168 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	2b00      	cmp	r3, #0
 8004012:	d010      	beq.n	8004036 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8a4 	bl	8004168 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b28      	cmp	r3, #40	@ 0x28
 800402a:	d141      	bne.n	80040b0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f846 	bl	80040c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004034:	e03c      	b.n	80040b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800403e:	d014      	beq.n	800406a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fdb5 	bl	8003bb0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1c      	ldr	r2, [pc, #112]	@ (80040bc <I2C_ITSlaveCplt+0x2c4>)
 800404a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff f8a3 	bl	80031ae <HAL_I2C_ListenCpltCallback>
}
 8004068:	e022      	b.n	80040b0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b22      	cmp	r3, #34	@ 0x22
 8004074:	d10e      	bne.n	8004094 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7fc fd81 	bl	8000b94 <HAL_I2C_SlaveRxCpltCallback>
}
 8004092:	e00d      	b.n	80040b0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fde6 	bl	8000c7c <HAL_I2C_SlaveTxCpltCallback>
}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	fe00e800 	.word	0xfe00e800
 80040bc:	ffff0000 	.word	0xffff0000

080040c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a25      	ldr	r2, [pc, #148]	@ (8004164 <I2C_ITListenCplt+0xa4>)
 80040ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d022      	beq.n	800413c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800413c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fa21 	bl	8004588 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2210      	movs	r2, #16
 800414c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff f829 	bl	80031ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	ffff0000 	.word	0xffff0000

08004168 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004178:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a6d      	ldr	r2, [pc, #436]	@ (800433c <I2C_ITError+0x1d4>)
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b28      	cmp	r3, #40	@ 0x28
 800419e:	d005      	beq.n	80041ac <I2C_ITError+0x44>
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b29      	cmp	r3, #41	@ 0x29
 80041a4:	d002      	beq.n	80041ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80041aa:	d10b      	bne.n	80041c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041ac:	2103      	movs	r1, #3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f9ea 	bl	8004588 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2228      	movs	r2, #40	@ 0x28
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a60      	ldr	r2, [pc, #384]	@ (8004340 <I2C_ITError+0x1d8>)
 80041c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80041c2:	e030      	b.n	8004226 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041c4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f9dd 	bl	8004588 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8e1 	bl	8004396 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b60      	cmp	r3, #96	@ 0x60
 80041de:	d01f      	beq.n	8004220 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d114      	bne.n	8004220 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d109      	bne.n	8004218 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2210      	movs	r2, #16
 800420a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2220      	movs	r2, #32
 800421e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	2b00      	cmp	r3, #0
 8004232:	d039      	beq.n	80042a8 <I2C_ITError+0x140>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b11      	cmp	r3, #17
 8004238:	d002      	beq.n	8004240 <I2C_ITError+0xd8>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b21      	cmp	r3, #33	@ 0x21
 800423e:	d133      	bne.n	80042a8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800424a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800424e:	d107      	bne.n	8004260 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800425e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fbfa 	bl	8002a5e <HAL_DMA_GetState>
 800426a:	4603      	mov	r3, r0
 800426c:	2b01      	cmp	r3, #1
 800426e:	d017      	beq.n	80042a0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	4a33      	ldr	r2, [pc, #204]	@ (8004344 <I2C_ITError+0x1dc>)
 8004276:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fbac 	bl	80029e2 <HAL_DMA_Abort_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d04d      	beq.n	800432c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800429a:	4610      	mov	r0, r2
 800429c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800429e:	e045      	b.n	800432c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f851 	bl	8004348 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042a6:	e041      	b.n	800432c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d039      	beq.n	8004324 <I2C_ITError+0x1bc>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b12      	cmp	r3, #18
 80042b4:	d002      	beq.n	80042bc <I2C_ITError+0x154>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b22      	cmp	r3, #34	@ 0x22
 80042ba:	d133      	bne.n	8004324 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ca:	d107      	bne.n	80042dc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fbbc 	bl	8002a5e <HAL_DMA_GetState>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d017      	beq.n	800431c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f0:	4a14      	ldr	r2, [pc, #80]	@ (8004344 <I2C_ITError+0x1dc>)
 80042f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fb6e 	bl	80029e2 <HAL_DMA_Abort_IT>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d011      	beq.n	8004330 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004316:	4610      	mov	r0, r2
 8004318:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800431a:	e009      	b.n	8004330 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f813 	bl	8004348 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004322:	e005      	b.n	8004330 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f80f 	bl	8004348 <I2C_TreatErrorCallback>
  }
}
 800432a:	e002      	b.n	8004332 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800432c:	bf00      	nop
 800432e:	e000      	b.n	8004332 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004330:	bf00      	nop
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	ffff0000 	.word	0xffff0000
 8004340:	08003213 	.word	0x08003213
 8004344:	080043df 	.word	0x080043df

08004348 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b60      	cmp	r3, #96	@ 0x60
 800435a:	d10e      	bne.n	800437a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe ff43 	bl	80031fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004378:	e009      	b.n	800438e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fe ff2e 	bl	80031ea <HAL_I2C_ErrorCallback>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d103      	bne.n	80043b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d007      	beq.n	80043d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	619a      	str	r2, [r3, #24]
  }
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	2200      	movs	r2, #0
 80043fa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ff9b 	bl	8004348 <I2C_TreatErrorCallback>
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	817b      	strh	r3, [r7, #10]
 800442a:	4613      	mov	r3, r2
 800442c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800442e:	897b      	ldrh	r3, [r7, #10]
 8004430:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004434:	7a7b      	ldrb	r3, [r7, #9]
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800443c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	4313      	orrs	r3, r2
 8004446:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800444a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	0d5b      	lsrs	r3, r3, #21
 8004456:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800445a:	4b08      	ldr	r3, [pc, #32]	@ (800447c <I2C_TransferConfig+0x60>)
 800445c:	430b      	orrs	r3, r1
 800445e:	43db      	mvns	r3, r3
 8004460:	ea02 0103 	and.w	r1, r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	03ff63ff 	.word	0x03ff63ff

08004480 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	4a39      	ldr	r2, [pc, #228]	@ (800457c <I2C_Enable_IRQ+0xfc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d032      	beq.n	8004500 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800449e:	4a38      	ldr	r2, [pc, #224]	@ (8004580 <I2C_Enable_IRQ+0x100>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d02d      	beq.n	8004500 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80044a8:	4a36      	ldr	r2, [pc, #216]	@ (8004584 <I2C_Enable_IRQ+0x104>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d028      	beq.n	8004500 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da03      	bge.n	80044be <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80044bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80044ce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044d0:	887b      	ldrh	r3, [r7, #2]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80044e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044e2:	887b      	ldrh	r3, [r7, #2]
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d103      	bne.n	80044f0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80044ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d133      	bne.n	800455e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f043 0320 	orr.w	r3, r3, #32
 80044fc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044fe:	e02e      	b.n	800455e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004504:	2b00      	cmp	r3, #0
 8004506:	da03      	bge.n	8004510 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800450e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004510:	887b      	ldrh	r3, [r7, #2]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004520:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004532:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	2b10      	cmp	r3, #16
 8004538:	d103      	bne.n	8004542 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004540:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004542:	887b      	ldrh	r3, [r7, #2]
 8004544:	2b20      	cmp	r3, #32
 8004546:	d103      	bne.n	8004550 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800454e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	2b40      	cmp	r3, #64	@ 0x40
 8004554:	d103      	bne.n	800455e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800455c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	08003405 	.word	0x08003405
 8004580:	08003881 	.word	0x08003881
 8004584:	080035f9 	.word	0x080035f9

08004588 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00f      	beq.n	80045c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80045a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045b6:	2b28      	cmp	r3, #40	@ 0x28
 80045b8:	d003      	beq.n	80045c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80045c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80045c2:	887b      	ldrh	r3, [r7, #2]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00f      	beq.n	80045ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80045d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045e0:	2b28      	cmp	r3, #40	@ 0x28
 80045e2:	d003      	beq.n	80045ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80045ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da03      	bge.n	80045fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d103      	bne.n	800460a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004608:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	2b20      	cmp	r3, #32
 800460e:	d103      	bne.n	8004618 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d103      	bne.n	8004626 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004624:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	43da      	mvns	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	400a      	ands	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	d138      	bne.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004664:	2302      	movs	r3, #2
 8004666:	e032      	b.n	80046ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	@ 0x24
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d139      	bne.n	8004764 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e033      	b.n	8004766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2224      	movs	r2, #36	@ 0x24
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800472c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	e000      	b.n	8004766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800477a:	af00      	add	r7, sp, #0
 800477c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004780:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004784:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f001 b823 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 817d 	beq.w	8004aaa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047b0:	4bbc      	ldr	r3, [pc, #752]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d00c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047bc:	4bb9      	ldr	r3, [pc, #740]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d15c      	bne.n	8004882 <HAL_RCC_OscConfig+0x10e>
 80047c8:	4bb6      	ldr	r3, [pc, #728]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d4:	d155      	bne.n	8004882 <HAL_RCC_OscConfig+0x10e>
 80047d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047da:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_RCC_OscConfig+0x94>
 8004802:	4ba8      	ldr	r3, [pc, #672]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	e015      	b.n	8004834 <HAL_RCC_OscConfig+0xc0>
 8004808:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800480c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800481c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004820:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004824:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004830:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004838:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800483c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004840:	fa92 f2a2 	rbit	r2, r2
 8004844:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004848:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800484c:	fab2 f282 	clz	r2, r2
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	f042 0220 	orr.w	r2, r2, #32
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	f002 021f 	and.w	r2, r2, #31
 800485c:	2101      	movs	r1, #1
 800485e:	fa01 f202 	lsl.w	r2, r1, r2
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 811f 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x334>
 800486a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 8116 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f000 bfaf 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004886:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x12e>
 8004894:	4b83      	ldr	r3, [pc, #524]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a82      	ldr	r2, [pc, #520]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 800489a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e036      	b.n	8004910 <HAL_RCC_OscConfig+0x19c>
 80048a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x158>
 80048b2:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7b      	ldr	r2, [pc, #492]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	4b79      	ldr	r3, [pc, #484]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a78      	ldr	r2, [pc, #480]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	e021      	b.n	8004910 <HAL_RCC_OscConfig+0x19c>
 80048cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x184>
 80048de:	4b71      	ldr	r3, [pc, #452]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a70      	ldr	r2, [pc, #448]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	4b6e      	ldr	r3, [pc, #440]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6d      	ldr	r2, [pc, #436]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0x19c>
 80048f8:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a69      	ldr	r2, [pc, #420]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80048fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b67      	ldr	r3, [pc, #412]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a66      	ldr	r2, [pc, #408]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 800490a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004910:	4b64      	ldr	r3, [pc, #400]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	f023 020f 	bic.w	r2, r3, #15
 8004918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	495f      	ldr	r1, [pc, #380]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004926:	4313      	orrs	r3, r2
 8004928:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800492a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d059      	beq.n	80049ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493a:	f7fc fb31 	bl	8000fa0 <HAL_GetTick>
 800493e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004944:	f7fc fb2c 	bl	8000fa0 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b64      	cmp	r3, #100	@ 0x64
 8004952:	d902      	bls.n	800495a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	f000 bf43 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
 800495a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800495e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800496e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d102      	bne.n	800498c <HAL_RCC_OscConfig+0x218>
 8004986:	4b47      	ldr	r3, [pc, #284]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	e015      	b.n	80049b8 <HAL_RCC_OscConfig+0x244>
 800498c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004990:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80049a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049a4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80049a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80049b4:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049bc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80049c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80049c4:	fa92 f2a2 	rbit	r2, r2
 80049c8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80049cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80049d0:	fab2 f282 	clz	r2, r2
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f042 0220 	orr.w	r2, r2, #32
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	f002 021f 	and.w	r2, r2, #31
 80049e0:	2101      	movs	r1, #1
 80049e2:	fa01 f202 	lsl.w	r2, r1, r2
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ab      	beq.n	8004944 <HAL_RCC_OscConfig+0x1d0>
 80049ec:	e05d      	b.n	8004aaa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fc fad7 	bl	8000fa0 <HAL_GetTick>
 80049f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fc fad2 	bl	8000fa0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b64      	cmp	r3, #100	@ 0x64
 8004a06:	d902      	bls.n	8004a0e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	f000 bee9 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
 8004a0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a12:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004a22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d102      	bne.n	8004a40 <HAL_RCC_OscConfig+0x2cc>
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	e015      	b.n	8004a6c <HAL_RCC_OscConfig+0x2f8>
 8004a40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a44:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004a54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a58:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004a5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004a68:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <HAL_RCC_OscConfig+0x330>)
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a70:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004a74:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004a78:	fa92 f2a2 	rbit	r2, r2
 8004a7c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004a80:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004a84:	fab2 f282 	clz	r2, r2
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	f042 0220 	orr.w	r2, r2, #32
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	f002 021f 	and.w	r2, r2, #31
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ab      	bne.n	80049f8 <HAL_RCC_OscConfig+0x284>
 8004aa0:	e003      	b.n	8004aaa <HAL_RCC_OscConfig+0x336>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 817d 	beq.w	8004dba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ac0:	4ba6      	ldr	r3, [pc, #664]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004acc:	4ba3      	ldr	r3, [pc, #652]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d172      	bne.n	8004bbe <HAL_RCC_OscConfig+0x44a>
 8004ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d16c      	bne.n	8004bbe <HAL_RCC_OscConfig+0x44a>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004af6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d102      	bne.n	8004b14 <HAL_RCC_OscConfig+0x3a0>
 8004b0e:	4b93      	ldr	r3, [pc, #588]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	e013      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c8>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004b26:	2302      	movs	r3, #2
 8004b28:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004b2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004b38:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004b42:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004b46:	fa92 f2a2 	rbit	r2, r2
 8004b4a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004b4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004b52:	fab2 f282 	clz	r2, r2
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	f042 0220 	orr.w	r2, r2, #32
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	f002 021f 	and.w	r2, r2, #31
 8004b62:	2101      	movs	r1, #1
 8004b64:	fa01 f202 	lsl.w	r2, r1, r2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCC_OscConfig+0x410>
 8004b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d002      	beq.n	8004b84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f000 be2e 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b75      	ldr	r3, [pc, #468]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	21f8      	movs	r1, #248	@ 0xf8
 8004b9a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004ba2:	fa91 f1a1 	rbit	r1, r1
 8004ba6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004baa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004bae:	fab1 f181 	clz	r1, r1
 8004bb2:	b2c9      	uxtb	r1, r1
 8004bb4:	408b      	lsls	r3, r1
 8004bb6:	4969      	ldr	r1, [pc, #420]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bbc:	e0fd      	b.n	8004dba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8088 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x56c>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004be2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004bf0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fc f9d0 	bl	8000fa0 <HAL_GetTick>
 8004c00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c06:	f7fc f9cb 	bl	8000fa0 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d902      	bls.n	8004c1c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	f000 bde2 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004c2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d102      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4d8>
 8004c46:	4b45      	ldr	r3, [pc, #276]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	e013      	b.n	8004c74 <HAL_RCC_OscConfig+0x500>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004c5e:	2302      	movs	r3, #2
 8004c60:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004c64:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004c70:	4b3a      	ldr	r3, [pc, #232]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	2202      	movs	r2, #2
 8004c76:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004c7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004c7e:	fa92 f2a2 	rbit	r2, r2
 8004c82:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004c86:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004c8a:	fab2 f282 	clz	r2, r2
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	f042 0220 	orr.w	r2, r2, #32
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	f002 021f 	and.w	r2, r2, #31
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0af      	beq.n	8004c06 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	21f8      	movs	r1, #248	@ 0xf8
 8004cbc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004cc4:	fa91 f1a1 	rbit	r1, r1
 8004cc8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004ccc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004cd0:	fab1 f181 	clz	r1, r1
 8004cd4:	b2c9      	uxtb	r1, r1
 8004cd6:	408b      	lsls	r3, r1
 8004cd8:	4920      	ldr	r1, [pc, #128]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
 8004cde:	e06c      	b.n	8004dba <HAL_RCC_OscConfig+0x646>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004cf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	461a      	mov	r2, r3
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fc f948 	bl	8000fa0 <HAL_GetTick>
 8004d10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fc f943 	bl	8000fa0 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d902      	bls.n	8004d2c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	f000 bd5a 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d32:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004d36:	fa93 f3a3 	rbit	r3, r3
 8004d3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d104      	bne.n	8004d60 <HAL_RCC_OscConfig+0x5ec>
 8004d56:	4b01      	ldr	r3, [pc, #4]	@ (8004d5c <HAL_RCC_OscConfig+0x5e8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	e015      	b.n	8004d88 <HAL_RCC_OscConfig+0x614>
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	2302      	movs	r3, #2
 8004d62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004d72:	2302      	movs	r3, #2
 8004d74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004d78:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004d84:	4bc8      	ldr	r3, [pc, #800]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004d8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004d92:	fa92 f2a2 	rbit	r2, r2
 8004d96:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004d9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004d9e:	fab2 f282 	clz	r2, r2
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	f042 0220 	orr.w	r2, r2, #32
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	f002 021f 	and.w	r2, r2, #31
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ad      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8110 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d079      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x760>
 8004de0:	2301      	movs	r3, #1
 8004de2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4bab      	ldr	r3, [pc, #684]	@ (80050ac <HAL_RCC_OscConfig+0x938>)
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	461a      	mov	r2, r3
 8004e06:	2301      	movs	r3, #1
 8004e08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0a:	f7fc f8c9 	bl	8000fa0 <HAL_GetTick>
 8004e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e14:	f7fc f8c4 	bl	8000fa0 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d902      	bls.n	8004e2a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	f000 bcdb 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004e34:	fa93 f3a3 	rbit	r3, r3
 8004e38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e44:	2202      	movs	r2, #2
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	fa93 f2a3 	rbit	r2, r3
 8004e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e68:	2202      	movs	r2, #2
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	fa93 f2a3 	rbit	r2, r3
 8004e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004e82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e84:	4b88      	ldr	r3, [pc, #544]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 8004e86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004e90:	2102      	movs	r1, #2
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	fa93 f1a3 	rbit	r1, r3
 8004ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004eaa:	6019      	str	r1, [r3, #0]
  return result;
 8004eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0a0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x6a0>
 8004ed2:	e08d      	b.n	8004ff0 <HAL_RCC_OscConfig+0x87c>
 8004ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	fa93 f2a3 	rbit	r2, r3
 8004eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ef6:	601a      	str	r2, [r3, #0]
  return result;
 8004ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004f00:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f02:	fab3 f383 	clz	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b68      	ldr	r3, [pc, #416]	@ (80050ac <HAL_RCC_OscConfig+0x938>)
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	461a      	mov	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f16:	f7fc f843 	bl	8000fa0 <HAL_GetTick>
 8004f1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f20:	f7fc f83e 	bl	8000fa0 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d902      	bls.n	8004f36 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	f000 bc55 	b.w	80057e0 <HAL_RCC_OscConfig+0x106c>
 8004f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f3e:	2202      	movs	r2, #2
 8004f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	fa93 f2a3 	rbit	r2, r3
 8004f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f62:	2202      	movs	r2, #2
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	fa93 f2a3 	rbit	r2, r3
 8004f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f86:	2202      	movs	r2, #2
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	fa93 f2a3 	rbit	r2, r3
 8004f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004fa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa2:	4b41      	ldr	r3, [pc, #260]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 8004fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004faa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004fae:	2102      	movs	r1, #2
 8004fb0:	6019      	str	r1, [r3, #0]
 8004fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	fa93 f1a3 	rbit	r1, r3
 8004fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004fc8:	6019      	str	r1, [r3, #0]
  return result;
 8004fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	fab3 f383 	clz	r3, r3
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d197      	bne.n	8004f20 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 81a1 	beq.w	8005348 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800500c:	4b26      	ldr	r3, [pc, #152]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d116      	bne.n	8005046 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005018:	4b23      	ldr	r3, [pc, #140]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4a22      	ldr	r2, [pc, #136]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 800501e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005022:	61d3      	str	r3, [r2, #28]
 8005024:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800502c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005030:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800503a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800503e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005046:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <HAL_RCC_OscConfig+0x93c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d11a      	bne.n	8005088 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005052:	4b17      	ldr	r3, [pc, #92]	@ (80050b0 <HAL_RCC_OscConfig+0x93c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <HAL_RCC_OscConfig+0x93c>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505e:	f7fb ff9f 	bl	8000fa0 <HAL_GetTick>
 8005062:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005066:	e009      	b.n	800507c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005068:	f7fb ff9a 	bl	8000fa0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b64      	cmp	r3, #100	@ 0x64
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e3b1      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	4b0c      	ldr	r3, [pc, #48]	@ (80050b0 <HAL_RCC_OscConfig+0x93c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ef      	beq.n	8005068 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800508c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10d      	bne.n	80050b4 <HAL_RCC_OscConfig+0x940>
 8005098:	4b03      	ldr	r3, [pc, #12]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	4a02      	ldr	r2, [pc, #8]	@ (80050a8 <HAL_RCC_OscConfig+0x934>)
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	6213      	str	r3, [r2, #32]
 80050a4:	e03c      	b.n	8005120 <HAL_RCC_OscConfig+0x9ac>
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000
 80050ac:	10908120 	.word	0x10908120
 80050b0:	40007000 	.word	0x40007000
 80050b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10c      	bne.n	80050de <HAL_RCC_OscConfig+0x96a>
 80050c4:	4bc1      	ldr	r3, [pc, #772]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4ac0      	ldr	r2, [pc, #768]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	6213      	str	r3, [r2, #32]
 80050d0:	4bbe      	ldr	r3, [pc, #760]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4abd      	ldr	r2, [pc, #756]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80050d6:	f023 0304 	bic.w	r3, r3, #4
 80050da:	6213      	str	r3, [r2, #32]
 80050dc:	e020      	b.n	8005120 <HAL_RCC_OscConfig+0x9ac>
 80050de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x994>
 80050ee:	4bb7      	ldr	r3, [pc, #732]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	4ab6      	ldr	r2, [pc, #728]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	6213      	str	r3, [r2, #32]
 80050fa:	4bb4      	ldr	r3, [pc, #720]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	4ab3      	ldr	r2, [pc, #716]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6213      	str	r3, [r2, #32]
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0x9ac>
 8005108:	4bb0      	ldr	r3, [pc, #704]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	4aaf      	ldr	r2, [pc, #700]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	6213      	str	r3, [r2, #32]
 8005114:	4bad      	ldr	r3, [pc, #692]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	4aac      	ldr	r2, [pc, #688]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 800511a:	f023 0304 	bic.w	r3, r3, #4
 800511e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005124:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8081 	beq.w	8005234 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005132:	f7fb ff35 	bl	8000fa0 <HAL_GetTick>
 8005136:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	e00b      	b.n	8005154 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513c:	f7fb ff30 	bl	8000fa0 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e345      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
 8005154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005158:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800515c:	2202      	movs	r2, #2
 800515e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005164:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	fa93 f2a3 	rbit	r2, r3
 800516e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005172:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800517c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005180:	2202      	movs	r2, #2
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005188:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	fa93 f2a3 	rbit	r2, r3
 8005192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005196:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800519a:	601a      	str	r2, [r3, #0]
  return result;
 800519c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80051a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f043 0302 	orr.w	r3, r3, #2
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d102      	bne.n	80051c0 <HAL_RCC_OscConfig+0xa4c>
 80051ba:	4b84      	ldr	r3, [pc, #528]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	e013      	b.n	80051e8 <HAL_RCC_OscConfig+0xa74>
 80051c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80051c8:	2202      	movs	r2, #2
 80051ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	fa93 f2a3 	rbit	r2, r3
 80051da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	4b79      	ldr	r3, [pc, #484]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80051f0:	2102      	movs	r1, #2
 80051f2:	6011      	str	r1, [r2, #0]
 80051f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	fa92 f1a2 	rbit	r1, r2
 8005202:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005206:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800520a:	6011      	str	r1, [r2, #0]
  return result;
 800520c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005210:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	fab2 f282 	clz	r2, r2
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	f002 021f 	and.w	r2, r2, #31
 8005226:	2101      	movs	r1, #1
 8005228:	fa01 f202 	lsl.w	r2, r1, r2
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d084      	beq.n	800513c <HAL_RCC_OscConfig+0x9c8>
 8005232:	e07f      	b.n	8005334 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005234:	f7fb feb4 	bl	8000fa0 <HAL_GetTick>
 8005238:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523c:	e00b      	b.n	8005256 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fb feaf 	bl	8000fa0 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e2c4      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
 8005256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800525a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800525e:	2202      	movs	r2, #2
 8005260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005266:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	fa93 f2a3 	rbit	r2, r3
 8005270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005274:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005282:	2202      	movs	r2, #2
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800528a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	fa93 f2a3 	rbit	r2, r3
 8005294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005298:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800529c:	601a      	str	r2, [r3, #0]
  return result;
 800529e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80052a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a8:	fab3 f383 	clz	r3, r3
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d102      	bne.n	80052c2 <HAL_RCC_OscConfig+0xb4e>
 80052bc:	4b43      	ldr	r3, [pc, #268]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	e013      	b.n	80052ea <HAL_RCC_OscConfig+0xb76>
 80052c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80052ca:	2202      	movs	r2, #2
 80052cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	fa93 f2a3 	rbit	r2, r3
 80052dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052e0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	4b39      	ldr	r3, [pc, #228]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052ee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80052f2:	2102      	movs	r1, #2
 80052f4:	6011      	str	r1, [r2, #0]
 80052f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052fa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	fa92 f1a2 	rbit	r1, r2
 8005304:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005308:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800530c:	6011      	str	r1, [r2, #0]
  return result;
 800530e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005312:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	fab2 f282 	clz	r2, r2
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	f002 021f 	and.w	r2, r2, #31
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f202 	lsl.w	r2, r1, r2
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d184      	bne.n	800523e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005334:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005338:	2b01      	cmp	r3, #1
 800533a:	d105      	bne.n	8005348 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533c:	4b23      	ldr	r3, [pc, #140]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	4a22      	ldr	r2, [pc, #136]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 8005342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005346:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800534c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8242 	beq.w	80057de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800535a:	4b1c      	ldr	r3, [pc, #112]	@ (80053cc <HAL_RCC_OscConfig+0xc58>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	2b08      	cmp	r3, #8
 8005364:	f000 8213 	beq.w	800578e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800536c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	2b02      	cmp	r3, #2
 8005376:	f040 8162 	bne.w	800563e <HAL_RCC_OscConfig+0xeca>
 800537a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800537e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005382:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800538c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	fa93 f2a3 	rbit	r2, r3
 8005396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800539a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800539e:	601a      	str	r2, [r3, #0]
  return result;
 80053a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053a4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80053a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80053b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	2300      	movs	r3, #0
 80053be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fb fdee 	bl	8000fa0 <HAL_GetTick>
 80053c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c8:	e00c      	b.n	80053e4 <HAL_RCC_OscConfig+0xc70>
 80053ca:	bf00      	nop
 80053cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fb fde6 	bl	8000fa0 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e1fd      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
 80053e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80053ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	fa93 f2a3 	rbit	r2, r3
 8005400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005404:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005408:	601a      	str	r2, [r3, #0]
  return result;
 800540a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800540e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005412:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005414:	fab3 f383 	clz	r3, r3
 8005418:	b2db      	uxtb	r3, r3
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <HAL_RCC_OscConfig+0xcba>
 8005428:	4bb0      	ldr	r3, [pc, #704]	@ (80056ec <HAL_RCC_OscConfig+0xf78>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	e027      	b.n	800547e <HAL_RCC_OscConfig+0xd0a>
 800542e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005432:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005436:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800543a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005440:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	fa93 f2a3 	rbit	r2, r3
 800544a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800544e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005458:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800545c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005466:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	fa93 f2a3 	rbit	r2, r3
 8005470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005474:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	4b9c      	ldr	r3, [pc, #624]	@ (80056ec <HAL_RCC_OscConfig+0xf78>)
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005482:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005486:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800548a:	6011      	str	r1, [r2, #0]
 800548c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005490:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	fa92 f1a2 	rbit	r1, r2
 800549a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800549e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80054a2:	6011      	str	r1, [r2, #0]
  return result;
 80054a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80054a8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	fab2 f282 	clz	r2, r2
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	f042 0220 	orr.w	r2, r2, #32
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	f002 021f 	and.w	r2, r2, #31
 80054be:	2101      	movs	r1, #1
 80054c0:	fa01 f202 	lsl.w	r2, r1, r2
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d182      	bne.n	80053d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ca:	4b88      	ldr	r3, [pc, #544]	@ (80056ec <HAL_RCC_OscConfig+0xf78>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80054d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	430b      	orrs	r3, r1
 80054ec:	497f      	ldr	r1, [pc, #508]	@ (80056ec <HAL_RCC_OscConfig+0xf78>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	604b      	str	r3, [r1, #4]
 80054f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054f6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80054fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005504:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	fa93 f2a3 	rbit	r2, r3
 800550e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005512:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005516:	601a      	str	r2, [r3, #0]
  return result;
 8005518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800551c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005520:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005522:	fab3 f383 	clz	r3, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800552c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	461a      	mov	r2, r3
 8005534:	2301      	movs	r3, #1
 8005536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fb fd32 	bl	8000fa0 <HAL_GetTick>
 800553c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005540:	e009      	b.n	8005556 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005542:	f7fb fd2d 	bl	8000fa0 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e144      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
 8005556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800555a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800555e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005568:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	fa93 f2a3 	rbit	r2, r3
 8005572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005576:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800557a:	601a      	str	r2, [r3, #0]
  return result;
 800557c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005580:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005584:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <HAL_RCC_OscConfig+0xe2c>
 800559a:	4b54      	ldr	r3, [pc, #336]	@ (80056ec <HAL_RCC_OscConfig+0xf78>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	e027      	b.n	80055f0 <HAL_RCC_OscConfig+0xe7c>
 80055a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055a4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80055a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	fa93 f2a3 	rbit	r2, r3
 80055bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80055ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055d8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	fa93 f2a3 	rbit	r2, r3
 80055e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	4b3f      	ldr	r3, [pc, #252]	@ (80056ec <HAL_RCC_OscConfig+0xf78>)
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055f4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80055f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80055fc:	6011      	str	r1, [r2, #0]
 80055fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005602:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	fa92 f1a2 	rbit	r1, r2
 800560c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005610:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005614:	6011      	str	r1, [r2, #0]
  return result;
 8005616:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800561a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	fab2 f282 	clz	r2, r2
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	f042 0220 	orr.w	r2, r2, #32
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	f002 021f 	and.w	r2, r2, #31
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f202 	lsl.w	r2, r1, r2
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d082      	beq.n	8005542 <HAL_RCC_OscConfig+0xdce>
 800563c:	e0cf      	b.n	80057de <HAL_RCC_OscConfig+0x106a>
 800563e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005642:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005646:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800564a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005650:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	fa93 f2a3 	rbit	r2, r3
 800565a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800565e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005662:	601a      	str	r2, [r3, #0]
  return result;
 8005664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005668:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800566c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005678:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	461a      	mov	r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005684:	f7fb fc8c 	bl	8000fa0 <HAL_GetTick>
 8005688:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800568c:	e009      	b.n	80056a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800568e:	f7fb fc87 	bl	8000fa0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e09e      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
 80056a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056a6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80056aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056b4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	fa93 f2a3 	rbit	r2, r3
 80056be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056c2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80056c6:	601a      	str	r2, [r3, #0]
  return result;
 80056c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056cc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80056d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d104      	bne.n	80056f0 <HAL_RCC_OscConfig+0xf7c>
 80056e6:	4b01      	ldr	r3, [pc, #4]	@ (80056ec <HAL_RCC_OscConfig+0xf78>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	e029      	b.n	8005740 <HAL_RCC_OscConfig+0xfcc>
 80056ec:	40021000 	.word	0x40021000
 80056f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80056f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80056fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005702:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	fa93 f2a3 	rbit	r2, r3
 800570c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005710:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800571a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800571e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005728:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	fa93 f2a3 	rbit	r2, r3
 8005732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005736:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	4b2b      	ldr	r3, [pc, #172]	@ (80057ec <HAL_RCC_OscConfig+0x1078>)
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005744:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005748:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005752:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	fa92 f1a2 	rbit	r1, r2
 800575c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005760:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005764:	6011      	str	r1, [r2, #0]
  return result;
 8005766:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800576a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	f042 0220 	orr.w	r2, r2, #32
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f002 021f 	and.w	r2, r2, #31
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d180      	bne.n	800568e <HAL_RCC_OscConfig+0xf1a>
 800578c:	e027      	b.n	80057de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800578e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005792:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e01e      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057a2:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <HAL_RCC_OscConfig+0x1078>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80057ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d10b      	bne.n	80057da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80057c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80057ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d001      	beq.n	80057de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000

080057f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b09e      	sub	sp, #120	@ 0x78
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e162      	b.n	8005ace <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005808:	4b90      	ldr	r3, [pc, #576]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d910      	bls.n	8005838 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005816:	4b8d      	ldr	r3, [pc, #564]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f023 0207 	bic.w	r2, r3, #7
 800581e:	498b      	ldr	r1, [pc, #556]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	4b89      	ldr	r3, [pc, #548]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d001      	beq.n	8005838 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e14a      	b.n	8005ace <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005844:	4b82      	ldr	r3, [pc, #520]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	497f      	ldr	r1, [pc, #508]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 8005852:	4313      	orrs	r3, r2
 8005854:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80dc 	beq.w	8005a1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d13c      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xf6>
 800586c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005870:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005874:	fa93 f3a3 	rbit	r3, r3
 8005878:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800587a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587c:	fab3 f383 	clz	r3, r3
 8005880:	b2db      	uxtb	r3, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d102      	bne.n	8005896 <HAL_RCC_ClockConfig+0xa6>
 8005890:	4b6f      	ldr	r3, [pc, #444]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	e00f      	b.n	80058b6 <HAL_RCC_ClockConfig+0xc6>
 8005896:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800589a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80058a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058ac:	fa93 f3a3 	rbit	r3, r3
 80058b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058b2:	4b67      	ldr	r3, [pc, #412]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058be:	fa92 f2a2 	rbit	r2, r2
 80058c2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80058c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058c6:	fab2 f282 	clz	r2, r2
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	f042 0220 	orr.w	r2, r2, #32
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	f002 021f 	and.w	r2, r2, #31
 80058d6:	2101      	movs	r1, #1
 80058d8:	fa01 f202 	lsl.w	r2, r1, r2
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d17b      	bne.n	80059da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0f3      	b.n	8005ace <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d13c      	bne.n	8005968 <HAL_RCC_ClockConfig+0x178>
 80058ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f6:	fa93 f3a3 	rbit	r3, r3
 80058fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80058fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fe:	fab3 f383 	clz	r3, r3
 8005902:	b2db      	uxtb	r3, r3
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d102      	bne.n	8005918 <HAL_RCC_ClockConfig+0x128>
 8005912:	4b4f      	ldr	r3, [pc, #316]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	e00f      	b.n	8005938 <HAL_RCC_ClockConfig+0x148>
 8005918:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800591c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005920:	fa93 f3a3 	rbit	r3, r3
 8005924:	647b      	str	r3, [r7, #68]	@ 0x44
 8005926:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800592a:	643b      	str	r3, [r7, #64]	@ 0x40
 800592c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005934:	4b46      	ldr	r3, [pc, #280]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800593c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800593e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005940:	fa92 f2a2 	rbit	r2, r2
 8005944:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005946:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005948:	fab2 f282 	clz	r2, r2
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	f042 0220 	orr.w	r2, r2, #32
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	f002 021f 	and.w	r2, r2, #31
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f202 	lsl.w	r2, r1, r2
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d13a      	bne.n	80059da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0b2      	b.n	8005ace <HAL_RCC_ClockConfig+0x2de>
 8005968:	2302      	movs	r3, #2
 800596a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596e:	fa93 f3a3 	rbit	r3, r3
 8005972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005976:	fab3 f383 	clz	r3, r3
 800597a:	b2db      	uxtb	r3, r3
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d102      	bne.n	8005990 <HAL_RCC_ClockConfig+0x1a0>
 800598a:	4b31      	ldr	r3, [pc, #196]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	e00d      	b.n	80059ac <HAL_RCC_ClockConfig+0x1bc>
 8005990:	2302      	movs	r3, #2
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
 800599c:	2302      	movs	r3, #2
 800599e:	623b      	str	r3, [r7, #32]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	fa93 f3a3 	rbit	r3, r3
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	4b29      	ldr	r3, [pc, #164]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	2202      	movs	r2, #2
 80059ae:	61ba      	str	r2, [r7, #24]
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	fa92 f2a2 	rbit	r2, r2
 80059b6:	617a      	str	r2, [r7, #20]
  return result;
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	fab2 f282 	clz	r2, r2
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	f042 0220 	orr.w	r2, r2, #32
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	f002 021f 	and.w	r2, r2, #31
 80059ca:	2101      	movs	r1, #1
 80059cc:	fa01 f202 	lsl.w	r2, r1, r2
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e079      	b.n	8005ace <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059da:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f023 0203 	bic.w	r2, r3, #3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	491a      	ldr	r1, [pc, #104]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059ec:	f7fb fad8 	bl	8000fa0 <HAL_GetTick>
 80059f0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f2:	e00a      	b.n	8005a0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f4:	f7fb fad4 	bl	8000fa0 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e061      	b.n	8005ace <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0a:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f003 020c 	and.w	r2, r3, #12
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d1eb      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d214      	bcs.n	8005a54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 0207 	bic.w	r2, r3, #7
 8005a32:	4906      	ldr	r1, [pc, #24]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <HAL_RCC_ClockConfig+0x25c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e040      	b.n	8005ace <HAL_RCC_ClockConfig+0x2de>
 8005a4c:	40022000 	.word	0x40022000
 8005a50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	491a      	ldr	r1, [pc, #104]	@ (8005ad8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a7e:	4b16      	ldr	r3, [pc, #88]	@ (8005ad8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4912      	ldr	r1, [pc, #72]	@ (8005ad8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a92:	f000 f829 	bl	8005ae8 <HAL_RCC_GetSysClockFreq>
 8005a96:	4601      	mov	r1, r0
 8005a98:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aa0:	22f0      	movs	r2, #240	@ 0xf0
 8005aa2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	fa92 f2a2 	rbit	r2, r2
 8005aaa:	60fa      	str	r2, [r7, #12]
  return result;
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	fab2 f282 	clz	r2, r2
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	40d3      	lsrs	r3, r2
 8005ab6:	4a09      	ldr	r2, [pc, #36]	@ (8005adc <HAL_RCC_ClockConfig+0x2ec>)
 8005ab8:	5cd3      	ldrb	r3, [r2, r3]
 8005aba:	fa21 f303 	lsr.w	r3, r1, r3
 8005abe:	4a08      	ldr	r2, [pc, #32]	@ (8005ae0 <HAL_RCC_ClockConfig+0x2f0>)
 8005ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ac2:	4b08      	ldr	r3, [pc, #32]	@ (8005ae4 <HAL_RCC_ClockConfig+0x2f4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fb fa26 	bl	8000f18 <HAL_InitTick>
  
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3778      	adds	r7, #120	@ 0x78
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	0800662c 	.word	0x0800662c
 8005ae0:	20000000 	.word	0x20000000
 8005ae4:	20000004 	.word	0x20000004

08005ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005b02:	4b1e      	ldr	r3, [pc, #120]	@ (8005b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 030c 	and.w	r3, r3, #12
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d002      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x30>
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d003      	beq.n	8005b1e <HAL_RCC_GetSysClockFreq+0x36>
 8005b16:	e026      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b18:	4b19      	ldr	r3, [pc, #100]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b1a:	613b      	str	r3, [r7, #16]
      break;
 8005b1c:	e026      	b.n	8005b6c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	0c9b      	lsrs	r3, r3, #18
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	4a17      	ldr	r2, [pc, #92]	@ (8005b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b28:	5cd3      	ldrb	r3, [r2, r3]
 8005b2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005b2c:	4b13      	ldr	r3, [pc, #76]	@ (8005b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	4a14      	ldr	r2, [pc, #80]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b36:	5cd3      	ldrb	r3, [r2, r3]
 8005b38:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b44:	4a0e      	ldr	r2, [pc, #56]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e004      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a0c      	ldr	r2, [pc, #48]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	613b      	str	r3, [r7, #16]
      break;
 8005b64:	e002      	b.n	8005b6c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b66:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b68:	613b      	str	r3, [r7, #16]
      break;
 8005b6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6c:	693b      	ldr	r3, [r7, #16]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	007a1200 	.word	0x007a1200
 8005b84:	08006644 	.word	0x08006644
 8005b88:	08006654 	.word	0x08006654
 8005b8c:	003d0900 	.word	0x003d0900

08005b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b94:	4b03      	ldr	r3, [pc, #12]	@ (8005ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b96:	681b      	ldr	r3, [r3, #0]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000000 	.word	0x20000000

08005ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005bae:	f7ff ffef 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bbc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005bc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	fa92 f2a2 	rbit	r2, r2
 8005bc8:	603a      	str	r2, [r7, #0]
  return result;
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	fab2 f282 	clz	r2, r2
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	40d3      	lsrs	r3, r2
 8005bd4:	4a04      	ldr	r2, [pc, #16]	@ (8005be8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40021000 	.word	0x40021000
 8005be8:	0800663c 	.word	0x0800663c

08005bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005bf2:	f7ff ffcd 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005c00:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005c04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	fa92 f2a2 	rbit	r2, r2
 8005c0c:	603a      	str	r2, [r7, #0]
  return result;
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	fab2 f282 	clz	r2, r2
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	40d3      	lsrs	r3, r2
 8005c18:	4a04      	ldr	r2, [pc, #16]	@ (8005c2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c1a:	5cd3      	ldrb	r3, [r2, r3]
 8005c1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	0800663c 	.word	0x0800663c

08005c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b092      	sub	sp, #72	@ 0x48
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80cd 	beq.w	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c54:	4b86      	ldr	r3, [pc, #536]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10e      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c60:	4b83      	ldr	r3, [pc, #524]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4a82      	ldr	r2, [pc, #520]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c6a:	61d3      	str	r3, [r2, #28]
 8005c6c:	4b80      	ldr	r3, [pc, #512]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d118      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a79      	ldr	r2, [pc, #484]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c96:	f7fb f983 	bl	8000fa0 <HAL_GetTick>
 8005c9a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9e:	f7fb f97f 	bl	8000fa0 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b64      	cmp	r3, #100	@ 0x64
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e0db      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb0:	4b70      	ldr	r3, [pc, #448]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d07d      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d076      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cda:	4b65      	ldr	r3, [pc, #404]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ce8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	fa93 f3a3 	rbit	r3, r3
 8005cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cf4:	fab3 f383 	clz	r3, r3
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	461a      	mov	r2, r3
 8005d04:	2301      	movs	r3, #1
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	fa93 f3a3 	rbit	r3, r3
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d18:	fab3 f383 	clz	r3, r3
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4b55      	ldr	r3, [pc, #340]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	461a      	mov	r2, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d2c:	4a50      	ldr	r2, [pc, #320]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d045      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3c:	f7fb f930 	bl	8000fa0 <HAL_GetTick>
 8005d40:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d42:	e00a      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fb f92c 	bl	8000fa0 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e086      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	fa93 f3a3 	rbit	r3, r3
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d66:	2302      	movs	r3, #2
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	fa93 f3a3 	rbit	r3, r3
 8005d70:	61fb      	str	r3, [r7, #28]
  return result;
 8005d72:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d74:	fab3 f383 	clz	r3, r3
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f043 0302 	orr.w	r3, r3, #2
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d102      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d88:	4b39      	ldr	r3, [pc, #228]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	e007      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	fa93 f3a3 	rbit	r3, r3
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	4b35      	ldr	r3, [pc, #212]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	2202      	movs	r2, #2
 8005da0:	613a      	str	r2, [r7, #16]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	fa92 f2a2 	rbit	r2, r2
 8005da8:	60fa      	str	r2, [r7, #12]
  return result;
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	fab2 f282 	clz	r2, r2
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	f002 021f 	and.w	r2, r2, #31
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0bd      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005dc8:	4b29      	ldr	r3, [pc, #164]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4926      	ldr	r1, [pc, #152]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de2:	4b23      	ldr	r3, [pc, #140]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4a22      	ldr	r2, [pc, #136]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	f023 0203 	bic.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	491a      	ldr	r1, [pc, #104]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e18:	4b15      	ldr	r3, [pc, #84]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	f023 0210 	bic.w	r2, r3, #16
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4912      	ldr	r1, [pc, #72]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e36:	4b0e      	ldr	r3, [pc, #56]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	490b      	ldr	r1, [pc, #44]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e54:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	4903      	ldr	r1, [pc, #12]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3748      	adds	r7, #72	@ 0x48
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40007000 	.word	0x40007000
 8005e78:	10908100 	.word	0x10908100

08005e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e040      	b.n	8005f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fa ffb8 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2224      	movs	r2, #36	@ 0x24
 8005ea8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f95e 	bl	8006184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f825 	bl	8005f18 <UART_SetConfig>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e01b      	b.n	8005f10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f9dd 	bl	80062c8 <UART_CheckIdleState>
 8005f0e:	4603      	mov	r3, r0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b8a      	ldr	r3, [pc, #552]	@ (800616c <UART_SetConfig+0x254>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a78      	ldr	r2, [pc, #480]	@ (8006170 <UART_SetConfig+0x258>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d120      	bne.n	8005fd6 <UART_SetConfig+0xbe>
 8005f94:	4b77      	ldr	r3, [pc, #476]	@ (8006174 <UART_SetConfig+0x25c>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d817      	bhi.n	8005fd0 <UART_SetConfig+0xb8>
 8005fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x90>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fb9 	.word	0x08005fb9
 8005fac:	08005fc5 	.word	0x08005fc5
 8005fb0:	08005fcb 	.word	0x08005fcb
 8005fb4:	08005fbf 	.word	0x08005fbf
 8005fb8:	2300      	movs	r3, #0
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e01d      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e01a      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e017      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	77fb      	strb	r3, [r7, #31]
 8005fce:	e014      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e011      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a67      	ldr	r2, [pc, #412]	@ (8006178 <UART_SetConfig+0x260>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d102      	bne.n	8005fe6 <UART_SetConfig+0xce>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e009      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a64      	ldr	r2, [pc, #400]	@ (800617c <UART_SetConfig+0x264>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d102      	bne.n	8005ff6 <UART_SetConfig+0xde>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e001      	b.n	8005ffa <UART_SetConfig+0xe2>
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006002:	d15a      	bne.n	80060ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006004:	7ffb      	ldrb	r3, [r7, #31]
 8006006:	2b08      	cmp	r3, #8
 8006008:	d827      	bhi.n	800605a <UART_SetConfig+0x142>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <UART_SetConfig+0xf8>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006035 	.word	0x08006035
 8006014:	0800603d 	.word	0x0800603d
 8006018:	08006045 	.word	0x08006045
 800601c:	0800605b 	.word	0x0800605b
 8006020:	0800604b 	.word	0x0800604b
 8006024:	0800605b 	.word	0x0800605b
 8006028:	0800605b 	.word	0x0800605b
 800602c:	0800605b 	.word	0x0800605b
 8006030:	08006053 	.word	0x08006053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006034:	f7ff fdb8 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 8006038:	61b8      	str	r0, [r7, #24]
        break;
 800603a:	e013      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800603c:	f7ff fdd6 	bl	8005bec <HAL_RCC_GetPCLK2Freq>
 8006040:	61b8      	str	r0, [r7, #24]
        break;
 8006042:	e00f      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006044:	4b4e      	ldr	r3, [pc, #312]	@ (8006180 <UART_SetConfig+0x268>)
 8006046:	61bb      	str	r3, [r7, #24]
        break;
 8006048:	e00c      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604a:	f7ff fd4d 	bl	8005ae8 <HAL_RCC_GetSysClockFreq>
 800604e:	61b8      	str	r0, [r7, #24]
        break;
 8006050:	e008      	b.n	8006064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006056:	61bb      	str	r3, [r7, #24]
        break;
 8006058:	e004      	b.n	8006064 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	77bb      	strb	r3, [r7, #30]
        break;
 8006062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d074      	beq.n	8006154 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	005a      	lsls	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b0f      	cmp	r3, #15
 8006084:	d916      	bls.n	80060b4 <UART_SetConfig+0x19c>
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800608c:	d212      	bcs.n	80060b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f023 030f 	bic.w	r3, r3, #15
 8006096:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	b29b      	uxth	r3, r3
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	89fa      	ldrh	r2, [r7, #14]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	e04f      	b.n	8006154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	77bb      	strb	r3, [r7, #30]
 80060b8:	e04c      	b.n	8006154 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ba:	7ffb      	ldrb	r3, [r7, #31]
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d828      	bhi.n	8006112 <UART_SetConfig+0x1fa>
 80060c0:	a201      	add	r2, pc, #4	@ (adr r2, 80060c8 <UART_SetConfig+0x1b0>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	08006113 	.word	0x08006113
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006113 	.word	0x08006113
 80060e0:	08006113 	.word	0x08006113
 80060e4:	08006113 	.word	0x08006113
 80060e8:	0800610b 	.word	0x0800610b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7ff fd5c 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 80060f0:	61b8      	str	r0, [r7, #24]
        break;
 80060f2:	e013      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7ff fd7a 	bl	8005bec <HAL_RCC_GetPCLK2Freq>
 80060f8:	61b8      	str	r0, [r7, #24]
        break;
 80060fa:	e00f      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060fc:	4b20      	ldr	r3, [pc, #128]	@ (8006180 <UART_SetConfig+0x268>)
 80060fe:	61bb      	str	r3, [r7, #24]
        break;
 8006100:	e00c      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006102:	f7ff fcf1 	bl	8005ae8 <HAL_RCC_GetSysClockFreq>
 8006106:	61b8      	str	r0, [r7, #24]
        break;
 8006108:	e008      	b.n	800611c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800610e:	61bb      	str	r3, [r7, #24]
        break;
 8006110:	e004      	b.n	800611c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	77bb      	strb	r3, [r7, #30]
        break;
 800611a:	bf00      	nop
    }

    if (pclk != 0U)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d018      	beq.n	8006154 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	085a      	lsrs	r2, r3, #1
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	441a      	add	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b0f      	cmp	r3, #15
 800613a:	d909      	bls.n	8006150 <UART_SetConfig+0x238>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006142:	d205      	bcs.n	8006150 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	b29a      	uxth	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e001      	b.n	8006154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006160:	7fbb      	ldrb	r3, [r7, #30]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	efff69f3 	.word	0xefff69f3
 8006170:	40013800 	.word	0x40013800
 8006174:	40021000 	.word	0x40021000
 8006178:	40004400 	.word	0x40004400
 800617c:	40004800 	.word	0x40004800
 8006180:	007a1200 	.word	0x007a1200

08006184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01a      	beq.n	800629a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006282:	d10a      	bne.n	800629a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b098      	sub	sp, #96	@ 0x60
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062d8:	f7fa fe62 	bl	8000fa0 <HAL_GetTick>
 80062dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d12e      	bne.n	800634a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f4:	2200      	movs	r2, #0
 80062f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f88c 	bl	8006418 <UART_WaitOnFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d021      	beq.n	800634a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	653b      	str	r3, [r7, #80]	@ 0x50
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006324:	647b      	str	r3, [r7, #68]	@ 0x44
 8006326:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800632a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e6      	bne.n	8006306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e062      	b.n	8006410 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b04      	cmp	r3, #4
 8006356:	d149      	bne.n	80063ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006360:	2200      	movs	r2, #0
 8006362:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f856 	bl	8006418 <UART_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d03c      	beq.n	80063ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	623b      	str	r3, [r7, #32]
   return(result);
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30
 8006392:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e6      	bne.n	8006372 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	69b9      	ldr	r1, [r7, #24]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	617b      	str	r3, [r7, #20]
   return(result);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e011      	b.n	8006410 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3758      	adds	r7, #88	@ 0x58
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006428:	e04f      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d04b      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006432:	f7fa fdb5 	bl	8000fa0 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <UART_WaitOnFlagUntilTimeout+0x30>
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e04e      	b.n	80064ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	d037      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b80      	cmp	r3, #128	@ 0x80
 800645e:	d034      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b40      	cmp	r3, #64	@ 0x40
 8006464:	d031      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b08      	cmp	r3, #8
 8006472:	d110      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2208      	movs	r2, #8
 800647a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f838 	bl	80064f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2208      	movs	r2, #8
 8006486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e029      	b.n	80064ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064a4:	d111      	bne.n	80064ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f81e 	bl	80064f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e00f      	b.n	80064ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4013      	ands	r3, r2
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d0a0      	beq.n	800642a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b095      	sub	sp, #84	@ 0x54
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800650e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006518:	643b      	str	r3, [r7, #64]	@ 0x40
 800651a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800651e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3308      	adds	r3, #8
 8006532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	61fb      	str	r3, [r7, #28]
   return(result);
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800654c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800654e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e5      	bne.n	800652c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006564:	2b01      	cmp	r3, #1
 8006566:	d118      	bne.n	800659a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	60bb      	str	r3, [r7, #8]
   return(result);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f023 0310 	bic.w	r3, r3, #16
 800657c:	647b      	str	r3, [r7, #68]	@ 0x44
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6979      	ldr	r1, [r7, #20]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	613b      	str	r3, [r7, #16]
   return(result);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e6      	bne.n	8006568 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065ae:	bf00      	nop
 80065b0:	3754      	adds	r7, #84	@ 0x54
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <memset>:
 80065ba:	4402      	add	r2, r0
 80065bc:	4603      	mov	r3, r0
 80065be:	4293      	cmp	r3, r2
 80065c0:	d100      	bne.n	80065c4 <memset+0xa>
 80065c2:	4770      	bx	lr
 80065c4:	f803 1b01 	strb.w	r1, [r3], #1
 80065c8:	e7f9      	b.n	80065be <memset+0x4>
	...

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	@ (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	@ (8006610 <__libc_init_array+0x44>)
 80065e0:	f000 f818 	bl	8006614 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	08006664 	.word	0x08006664
 8006608:	08006664 	.word	0x08006664
 800660c:	08006664 	.word	0x08006664
 8006610:	08006668 	.word	0x08006668

08006614 <_init>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr

08006620 <_fini>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr
